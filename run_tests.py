#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
"""

import subprocess
import sys
import os
import argparse
from pathlib import Path

def run_command(command, description):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    print(f"\nüîÑ {description}...")
    try:
        result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
        print(f"‚úÖ {description} - –£–°–ü–ï–®–ù–û")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå {description} - –ü–†–û–í–ê–õ–ï–ù")
        print(f"–û—à–∏–±–∫–∞: {e.stderr}")
        return False

def check_services():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–æ–≤"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤...")
    
    services = [
        ("http://localhost:8001/health", "RAG Service"),
        ("http://localhost:8003/health", "Chat Service"),
        ("http://localhost:8012/health", "Ollama Management Service"),
        ("http://localhost:8011/health", "Outgoing Control Service"),
    ]
    
    available_services = []
    for url, name in services:
        try:
            import httpx
            response = httpx.get(url, timeout=5)
            if response.status_code == 200:
                available_services.append(name)
                print(f"‚úÖ {name} - –¥–æ—Å—Ç—É–ø–µ–Ω")
            else:
                print(f"‚ùå {name} - –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (HTTP {response.status_code})")
        except Exception:
            print(f"‚ùå {name} - –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    return len(available_services) >= 2  # –¢—Ä–µ–±—É–µ–º –º–∏–Ω–∏–º—É–º 2 —Å–µ—Ä–≤–∏—Å–∞

def run_tests(test_type="all", coverage=True, parallel=False):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    project_root = Path(__file__).parent
    os.chdir(project_root)
    
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ AI Engineering Platform")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
    os.makedirs("reports", exist_ok=True)
    os.makedirs("htmlcov", exist_ok=True)
    
    # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã pytest
    base_args = [
        "python3", "-m", "pytest",
        "-v",
        "--tb=short",
        "--disable-warnings",
        "--color=yes"
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞
    if coverage:
        base_args.extend([
            "--cov=services",
            "--cov-report=html:htmlcov",
            "--cov-report=xml:coverage.xml",
            "--cov-report=term-missing",
            "--cov-fail-under=70"
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º HTML –æ—Ç—á–µ—Ç
    base_args.extend([
        "--html=reports/report.html",
        "--self-contained-html",
        "--json-report",
        "--json-report-file=reports/report.json"
    ])
    
    # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    if parallel:
        base_args.extend(["-n", "auto"])
    
    # –í—ã–±–∏—Ä–∞–µ–º —Ç–µ—Å—Ç—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞
    if test_type == "unit":
        base_args.extend(["tests/unit/", "-m", "unit"])
        description = "Unit —Ç–µ—Å—Ç—ã"
    elif test_type == "integration":
        base_args.extend(["tests/integration/", "-m", "integration"])
        description = "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã"
    elif test_type == "e2e":
        base_args.extend(["tests/e2e/", "-m", "e2e"])
        description = "E2E —Ç–µ—Å—Ç—ã"
    elif test_type == "outgoing_control":
        base_args.extend(["tests/outgoing_control/", "-m", "outgoing_control"])
        description = "–¢–µ—Å—Ç—ã –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è"
    else:  # all
        base_args.extend(["tests/"])
        description = "–í—Å–µ —Ç–µ—Å—Ç—ã"
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    success = run_command(" ".join(base_args), description)
    
    return success

def run_code_quality():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞...")
    
    checks = [
        ("flake8 services/ --count --select=E9,F63,F7,F82 --show-source --statistics", "Lint Python –∫–æ–¥"),
        ("black --check services/", "–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Python –∫–æ–¥–∞"),
        ("isort --check-only services/", "–ò–º–ø–æ—Ä—Ç—ã Python –∫–æ–¥–∞"),
    ]
    
    all_passed = True
    for command, description in checks:
        if not run_command(command, description):
            all_passed = False
    
    return all_passed

def generate_report():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç"""
    print("\nüìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...")
    
    report_content = f"""
# –û—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ AI Engineering Platform

**–î–∞—Ç–∞:** {subprocess.run(['date'], capture_output=True, text=True).stdout.strip()}
**–í–µ—Ä—Å–∏—è:** 1.0

## üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–µ—Å—Ç–æ–≤

- **Unit —Ç–µ—Å—Ç—ã:** tests/unit/
- **–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã:** tests/integration/
- **E2E —Ç–µ—Å—Ç—ã:** tests/e2e/
- **–¢–µ—Å—Ç—ã –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è:** tests/outgoing_control/

## üéØ –ü–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞

–¢—Ä–µ–±—É–µ—Ç—Å—è: **70%+**
–†–µ–∑—É–ª—å—Ç–∞—Ç: –°–º. htmlcov/index.html

## üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤

- **HTML –æ—Ç—á–µ—Ç:** reports/report.html
- **JSON –æ—Ç—á–µ—Ç:** reports/report.json
- **–ü–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞:** htmlcov/index.html

## üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤

```bash
# –í—Å–µ —Ç–µ—Å—Ç—ã
python run_tests.py

# –¢–æ–ª—å–∫–æ unit —Ç–µ—Å—Ç—ã
python run_tests.py --type unit

# –¢–æ–ª—å–∫–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
python run_tests.py --type integration

# –¢–æ–ª—å–∫–æ E2E —Ç–µ—Å—Ç—ã
python run_tests.py --type e2e

# –ë–µ–∑ –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–¥–∞
python run_tests.py --no-coverage

# –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
python run_tests.py --parallel
```

## üîß CI/CD

GitHub Actions workflow –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ `.github/workflows/ci-cd.yml`

## üìà –ú–µ—Ç—Ä–∏–∫–∏

- **–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤:** –°–º. –æ—Ç—á–µ—Ç—ã
- **–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:** –°–º. –æ—Ç—á–µ—Ç—ã
- **–ü–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞:** –°–º. htmlcov/index.html
"""
    
    with open("reports/README.md", "w", encoding="utf-8") as f:
        f.write(report_content)
    
    print("‚úÖ –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: reports/README.md")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description="–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ AI Engineering Platform")
    parser.add_argument("--type", choices=["all", "unit", "integration", "e2e", "outgoing_control"], 
                       default="all", help="–¢–∏–ø —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞")
    parser.add_argument("--no-coverage", action="store_true", help="–û—Ç–∫–ª—é—á–∏—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏–µ –ø–æ–∫—Ä—ã—Ç–∏—è")
    parser.add_argument("--parallel", action="store_true", help="–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ")
    parser.add_argument("--quality", action="store_true", help="–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞")
    parser.add_argument("--check-services", action="store_true", help="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–æ–≤")
    
    args = parser.parse_args()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–æ–≤
    if args.check_services:
        if not check_services():
            print("‚ö†Ô∏è –ù–µ –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –¥–æ—Å—Ç—É–ø–Ω—ã, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞
    if args.quality:
        if not run_code_quality():
            print("‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞ –ø—Ä–æ–≤–∞–ª–µ–Ω—ã")
            sys.exit(1)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    success = run_tests(
        test_type=args.type,
        coverage=not args.no_coverage,
        parallel=args.parallel
    )
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    generate_report()
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
    print("\n" + "=" * 60)
    if success:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("üìä –û—Ç—á–µ—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ reports/")
        print("üìà –ü–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞: htmlcov/index.html")
    else:
        print("‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´!")
        print("üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç—á–µ—Ç—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ reports/")
        sys.exit(1)

if __name__ == "__main__":
    main()
