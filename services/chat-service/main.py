"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π Chat Service —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ñ–∞–π–ª–æ–≤, OCR, –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
"""

from fastapi import FastAPI, HTTPException, UploadFile, File, Form, Depends, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse, StreamingResponse
from contextlib import asynccontextmanager
import uvicorn
import os
import io
import logging
import traceback
from typing import List, Optional, Dict, Any
from datetime import datetime
import json
import sys

from services.file_processor import FileProcessor
from services.document_exporter import DocumentExporter
from services.settings_service import SettingsService
from services.llm_service import LLMService

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä –µ—Å–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
try:
    os.makedirs('/app/logs', exist_ok=True)
    file_handler = logging.FileHandler('/app/logs/chat-service.log', mode='a')
    file_handler.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))
    logging.getLogger().addHandler(file_handler)
except Exception as e:
    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª–æ–≤—ã–π –ª–æ–≥–≥–µ—Ä: {e}")

logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
file_processor = FileProcessor()
document_exporter = DocumentExporter()
settings_service = SettingsService()
llm_service = LLMService()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
@asynccontextmanager
async def lifespan(app: FastAPI):
    # Startup
    logger.info("üöÄ Chat Service –∑–∞–ø—É—â–µ–Ω —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º")
    logger.info("üìÅ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: DOCX, PDF, XLS, MD, TXT")
    logger.info("üîç OCR –≤–∫–ª—é—á–µ–Ω –¥–ª—è —Ä–∞—Å—Ç—Ä–æ–≤—ã—Ö PDF")
    logger.info("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ LLM –¥–æ—Å—Ç—É–ø–Ω–æ")
    logger.info("üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ DOCX/PDF —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π")
    yield
    # Shutdown
    logger.info("üõë Chat Service –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

app = FastAPI(
    title="Chat Service - –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π",
    description="–°–µ—Ä–≤–∏—Å —á–∞—Ç–∞ —Å –ò–ò —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ñ–∞–π–ª–æ–≤, OCR, –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ —ç–∫—Å–ø–æ—Ä—Ç–∞",
    version="2.0.0",
    lifespan=lifespan,
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
    max_request_size=100 * 1024 * 1024,  # 100MB
)

# Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ–ª—å—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
@app.middleware("http")
async def log_requests(request: Request, call_next):
    start_time = datetime.now()
    logger.info(f"üì• –í—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å: {request.method} {request.url}")
    logger.debug(f"Headers: {dict(request.headers)}")
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
    content_length = request.headers.get("content-length")
    if content_length:
        size_mb = int(content_length) / (1024 * 1024)
        logger.info(f"üìä –†–∞–∑–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞: {size_mb:.2f} MB")
    
    try:
        response = await call_next(request)
        process_time = (datetime.now() - start_time).total_seconds()
        logger.info(f"üì§ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {response.status_code} –∑–∞ {process_time:.3f}s")
        return response
    except Exception as e:
        process_time = (datetime.now() - start_time).total_seconds()
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {str(e)} –∑–∞ {process_time:.3f}s")
        logger.error(f"Traceback: {traceback.format_exc()}")
        raise

app.add_middleware(
    CORSMiddleware,
    allow_origins=[
        "http://localhost:3000",
        "http://localhost:80",
        "http://localhost",
        "http://127.0.0.1:3000",
        "http://127.0.0.1:80",
        "http://127.0.0.1",
        "*"  # –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ origins –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    ],
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS"],
    allow_headers=["*"],
    expose_headers=["*"],
    max_age=3600
)

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —á–∞—Ç–æ–≤ (–≤ production –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis/DB)
chat_sessions = {}

@app.get("/")
async def root():
    logger.info("üè† –ó–∞–ø—Ä–æ—Å –∫ –∫–æ—Ä–Ω–µ–≤–æ–º—É —ç–Ω–¥–ø–æ–∏–Ω—Ç—É")
    try:
        response = {
            "message": "Chat Service - –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π",
            "version": "2.0.0",
            "features": [
                "–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–æ 100MB",
                "OCR –¥–ª—è —Ä–∞—Å—Ç—Ä–æ–≤—ã—Ö PDF",
                "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ LLM",
                "–≠–∫—Å–ø–æ—Ä—Ç –≤ DOCX/PDF —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π"
            ]
        }
        logger.info("‚úÖ –ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
        return response
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ—Ä–Ω–µ–≤–æ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç–µ: {str(e)}")
        logger.error(f"Traceback: {traceback.format_exc()}")
        raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")

@app.get("/health")
async def health():
    logger.info("üè• –ó–∞–ø—Ä–æ—Å –∫ health check")
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤
        services_status = {
            "file_processor": "ok",
            "document_exporter": "ok", 
            "settings_service": "ok"
        }
        
        response = {
            "status": "healthy",
            "service": "chat-service",
            "version": "2.0.0",
            "timestamp": datetime.now().isoformat(),
            "features_enabled": {
                "file_upload": True,
                "ocr": True,
                "settings": True,
                "export": True
            },
            "services": services_status
        }
        logger.info("‚úÖ Health check —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω")
        return response
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ health check: {str(e)}")
        logger.error(f"Traceback: {traceback.format_exc()}")
        raise HTTPException(status_code=500, detail="–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

# === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ù–ê–°–¢–†–û–ô–ö–ê–ú–ò ===

@app.get("/settings")
async def get_all_settings():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    return settings_service.get_all_settings()

@app.get("/settings/llm")
async def get_llm_settings():
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ LLM"""
    return settings_service.get_llm_settings()

@app.put("/settings/llm")
async def update_llm_settings(settings: Dict[str, Any]):
    """–û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ LLM"""
    return settings_service.update_llm_settings(settings)

@app.get("/settings/chat")
async def get_chat_settings():
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞"""
    return settings_service.get_chat_settings()

@app.put("/settings/chat")
async def update_chat_settings(settings: Dict[str, Any]):
    """–û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞"""
    return settings_service.update_chat_settings(settings)

@app.get("/settings/system")
async def get_system_settings():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    return settings_service.get_system_settings()

@app.put("/settings/system")
async def update_system_settings(settings: Dict[str, Any]):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    return settings_service.update_system_settings(settings)

@app.post("/settings/reset")
async def reset_settings():
    """–°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    return settings_service.reset_to_defaults()

@app.get("/settings/available")
async def get_available_options():
    """–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    models = await settings_service.get_available_models()
    return {
        "models": models,
        "languages": settings_service.get_available_languages(),
        "export_formats": settings_service.get_available_export_formats()
    }

# === –ó–ê–ì–†–£–ó–ö–ê –ò –û–ë–†–ê–ë–û–¢–ö–ê –§–ê–ô–õ–û–í ===

@app.post("/files/upload")
async def upload_file(file: UploadFile = File(...)):
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª"""
    logger.info(f"üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞: {file.filename} ({file.content_type})")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        file_content = await file.read()
        file_size = len(file_content)
        logger.info(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size} –±–∞–π—Ç ({file_size / (1024*1024):.2f} MB)")

        max_size = file_processor.get_max_file_size()
        if file_size > max_size:
            logger.warning(f"‚ö†Ô∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {file_size} > {max_size}")
            raise HTTPException(
                status_code=413,
                detail=f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {max_size / (1024*1024):.0f}MB"
            )

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª
        logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞: {file.filename}")
        result = await file_processor.process_file(file_content, file.filename)

        if not result["success"]:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            raise HTTPException(status_code=400, detail=result["error"])

        logger.info(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {file.filename}")
        logger.debug(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result}")
        return result

    except HTTPException as he:
        logger.error(f"‚ùå HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {he.detail}")
        raise
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
        logger.error(f"Traceback: {traceback.format_exc()}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")

@app.get("/files/supported")
async def get_supported_formats():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Ñ–∞–π–ª–æ–≤"""
    return {
        "supported_formats": file_processor.get_supported_formats(),
        "max_file_size": file_processor.get_max_file_size(),
        "max_file_size_mb": file_processor.get_max_file_size() / (1024 * 1024)
    }

# === –ß–ê–¢ –° –ò–ò ===

@app.post("/chat")
async def chat_with_ai(
    message: str = Form(...),
    session_id: str = Form(default="default"),
    files: List[UploadFile] = File(default=[])
):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç —Å –ò–ò"""
    logger.info(f"üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç. –°–µ—Å—Å–∏—è: {session_id}, –§–∞–π–ª–æ–≤: {len(files)}")
    logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {message[:100]}...")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if session_id not in chat_sessions:
            chat_sessions[session_id] = {
                "messages": [],
                "files": [],
                "created_at": datetime.now().isoformat()
            }
        
        session = chat_sessions[session_id]
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        processed_files = []
        for file in files:
            file_content = await file.read()
            result = await file_processor.process_file(file_content, file.filename)
            if result["success"]:
                processed_files.append(result)
                session["files"].append(result)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_message = {
            "role": "user",
            "content": message,
            "timestamp": datetime.now().isoformat(),
            "files": processed_files
        }
        session["messages"].append(user_message)
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ LLM
        llm_settings = settings_service.get_llm_settings()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è LLM
        context = _build_llm_context(session, llm_settings)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç LLM
        ai_response = await llm_service.generate_response(
            prompt=context,
            model=llm_settings.get('model', 'llama3.1:8b'),
            temperature=llm_settings.get('temperature', 0.7),
            max_tokens=llm_settings.get('max_tokens', 2048),
            top_p=llm_settings.get('top_p', 0.9),
            top_k=llm_settings.get('top_k', 40),
            repeat_penalty=llm_settings.get('repeat_penalty', 1.1),
            system_prompt=llm_settings.get('system_prompt', ''),
            timeout=llm_settings.get('timeout', 300.0)
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ò–ò
        ai_message = {
            "role": "assistant",
            "content": ai_response,
            "timestamp": datetime.now().isoformat()
        }
        session["messages"].append(ai_message)
        
        return {
            "success": True,
            "response": ai_response,
            "session_id": session_id,
            "files_processed": len(processed_files),
            "message_count": len(session["messages"])
        }
        
    except HTTPException as he:
        logger.error(f"‚ùå HTTP –æ—à–∏–±–∫–∞ –≤ —á–∞—Ç–µ: {he.detail}")
        raise
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ —á–∞—Ç–µ: {str(e)}")
        logger.error(f"Traceback: {traceback.format_exc()}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —á–∞—Ç–∞: {str(e)}")

@app.post("/chat/stream")
async def chat_with_ai_streaming(
    message: str = Form(...),
    session_id: str = Form(default="default"),
    files: List[UploadFile] = File(default=[])
):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç —Å –ò–ò (–ø–æ—Ç–æ–∫–æ–≤—ã–π –æ—Ç–≤–µ—Ç)"""
    logger.info(f"üåä –ü–æ—Ç–æ–∫–æ–≤—ã–π —á–∞—Ç. –°–µ—Å—Å–∏—è: {session_id}, –§–∞–π–ª–æ–≤: {len(files)}")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if session_id not in chat_sessions:
            chat_sessions[session_id] = {
                "messages": [],
                "files": [],
                "created_at": datetime.now().isoformat()
            }
        
        session = chat_sessions[session_id]
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        processed_files = []
        for file in files:
            file_content = await file.read()
            result = await file_processor.process_file(file_content, file.filename)
            if result["success"]:
                processed_files.append(result)
                session["files"].append(result)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_message = {
            "role": "user",
            "content": message,
            "timestamp": datetime.now().isoformat(),
            "files": processed_files
        }
        session["messages"].append(user_message)
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ LLM
        llm_settings = settings_service.get_llm_settings()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è LLM
        context = _build_llm_context(session, llm_settings)
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫–æ–≤—ã–π –æ—Ç–≤–µ—Ç
        async def generate_stream():
            full_response = ""
            async for chunk in llm_service.generate_streaming_response(
                prompt=context,
                model=llm_settings.get('model', 'llama3.1:8b'),
                temperature=llm_settings.get('temperature', 0.7),
                max_tokens=llm_settings.get('max_tokens', 2048),
                top_p=llm_settings.get('top_p', 0.9),
                top_k=llm_settings.get('top_k', 40),
                repeat_penalty=llm_settings.get('repeat_penalty', 1.1),
                system_prompt=llm_settings.get('system_prompt', ''),
                timeout=llm_settings.get('timeout', 300.0)
            ):
                full_response += chunk
                yield f"data: {json.dumps({'chunk': chunk, 'session_id': session_id})}\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ —Å–µ—Å—Å–∏—é
            ai_message = {
                "role": "assistant",
                "content": full_response,
                "timestamp": datetime.now().isoformat()
            }
            session["messages"].append(ai_message)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            yield f"data: {json.dumps({'done': True, 'session_id': session_id, 'full_response': full_response})}\n\n"
        
        return StreamingResponse(
            generate_stream(),
            media_type="text/plain",
            headers={
                "Cache-Control": "no-cache",
                "Connection": "keep-alive",
                "Content-Type": "text/event-stream"
            }
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ —á–∞—Ç–∞: {str(e)}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ —á–∞—Ç–∞: {str(e)}")

@app.get("/chat/sessions")
async def get_chat_sessions():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π —á–∞—Ç–∞"""
    return {
        "sessions": list(chat_sessions.keys()),
        "total_sessions": len(chat_sessions)
    }

@app.get("/chat/sessions/{session_id}")
async def get_chat_session(session_id: str):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å–µ—Å—Å–∏—é —á–∞—Ç–∞"""
    if session_id not in chat_sessions:
        raise HTTPException(status_code=404, detail="–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    return chat_sessions[session_id]

@app.delete("/chat/sessions/{session_id}")
async def delete_chat_session(session_id: str):
    """–£–¥–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏—é —á–∞—Ç–∞"""
    if session_id not in chat_sessions:
        raise HTTPException(status_code=404, detail="–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    del chat_sessions[session_id]
    return {"success": True, "message": "–°–µ—Å—Å–∏—è —É–¥–∞–ª–µ–Ω–∞"}

# === –≠–ö–°–ü–û–†–¢ –î–û–ö–£–ú–ï–ù–¢–û–í ===

@app.post("/export/docx")
async def export_to_docx(
    session_id: str = Form(...),
    filename: Optional[str] = Form(default=None)
):
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç –≤ DOCX"""
    try:
        if session_id not in chat_sessions:
            raise HTTPException(status_code=404, detail="–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        session = chat_sessions[session_id]
        llm_settings = settings_service.get_llm_settings()
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_data = {
            "topic": f"–ß–∞—Ç {session_id}",
            "messages": session["messages"],
            "files": session["files"],
            "llm_settings": llm_settings,
            "exported_at": datetime.now().isoformat()
        }
        
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ DOCX
        docx_bytes = await document_exporter.export_to_docx(export_data, filename)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∞–π–ª
        return StreamingResponse(
            io.BytesIO(docx_bytes),
            media_type="application/vnd.openxmlformats-officedocument.wordprocessingml.document",
            headers={"Content-Disposition": f"attachment; filename={filename or f'chat_{session_id}.docx'}"}
        )
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ DOCX: {str(e)}")

@app.post("/export/pdf")
async def export_to_pdf(
    session_id: str = Form(...),
    filename: Optional[str] = Form(default=None)
):
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç –≤ PDF"""
    try:
        if session_id not in chat_sessions:
            raise HTTPException(status_code=404, detail="–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        session = chat_sessions[session_id]
        llm_settings = settings_service.get_llm_settings()
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_data = {
            "topic": f"–ß–∞—Ç {session_id}",
            "messages": session["messages"],
            "files": session["files"],
            "llm_settings": llm_settings,
            "exported_at": datetime.now().isoformat()
        }
        
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ PDF
        pdf_bytes = await document_exporter.export_to_pdf(export_data, filename)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∞–π–ª
        return StreamingResponse(
            io.BytesIO(pdf_bytes),
            media_type="application/pdf",
            headers={"Content-Disposition": f"attachment; filename={filename or f'chat_{session_id}.pdf'}"}
        )
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ PDF: {str(e)}")

# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

def _build_llm_context(session: Dict[str, Any], llm_settings: Dict[str, Any]) -> str:
    """–°—Ç—Ä–æ–∏—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è LLM"""
    context = ""
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    if llm_settings.get("system_prompt"):
        context += f"–°–∏—Å—Ç–µ–º–∞: {llm_settings['system_prompt']}\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
    for message in session["messages"][-10:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
        role = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" if message["role"] == "user" else "–ò–ò"
        context += f"{role}: {message['content']}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö
        if message.get("files"):
            context += f"–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {[f['filename'] for f in message['files']]}\n"
    
    return context


if __name__ == "__main__":
    uvicorn.run(
        app, 
        host="0.0.0.0", 
        port=8003,
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
        limit_max_requests=1000,
        limit_concurrency=100,
        timeout_keep_alive=300,
        timeout_graceful_shutdown=30,
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –±–æ–ª—å—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        limit_request_line=8192,
        limit_request_fields=100,
        limit_request_field_size=8192
    )
