"""
QR –≤–∞–ª–∏–¥–∞—Ü–∏—è –†–î - –°–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ QR-–∫–æ–¥–æ–≤ —Ä–∞–±–æ—á–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
"""

from fastapi import FastAPI, HTTPException, Depends, UploadFile, File, Form, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse, FileResponse
from contextlib import asynccontextmanager
import uvicorn
import os
import sys
from typing import List, Optional
import io
import base64
import logging
import traceback
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç —É—Ç–∏–ª–∏—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
from logging_utils import setup_service_logging, log_request, log_error, log_performance, log_business_event

from database import init_db
from models import QRDocument, DocumentStatus
from schemas import (
    QRGenerateRequest, QRGenerateResponse, 
    QRValidateRequest, QRValidateResponse,
    DocumentStatusResponse, QRDocumentResponse
)
from services.qr_service import QRService
from services.document_service import DocumentService
from services.validation_service import ValidationService

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = setup_service_logging("qr-validation-service")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
@asynccontextmanager
async def lifespan(app: FastAPI):
    # Startup
    logger.info("üöÄ QR Validation Service –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    await init_db()
    logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    logger.info("üì± QR Validation Service –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    yield
    # Shutdown
    logger.info("üõë QR Validation Service –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...")

app = FastAPI(
    title="QR –≤–∞–ª–∏–¥–∞—Ü–∏—è –†–î",
    description="–°–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ QR-–∫–æ–¥–æ–≤ —Ä–∞–±–æ—á–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏",
    version="1.0.0",
    lifespan=lifespan
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
@app.middleware("http")
async def logging_middleware(request: Request, call_next):
    start_time = datetime.now()
    request_id = f"qr_req_{start_time.strftime('%Y%m%d_%H%M%S_%f')}"
    
    logger.info(f"üì• –í—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å: {request.method} {request.url.path}", extra={
        "request_id": request_id,
        "method": request.method,
        "path": request.url.path,
        "query_params": str(request.query_params)
    })
    
    try:
        response = await call_next(request)
        process_time = (datetime.now() - start_time).total_seconds()
        
        log_request(
            logger=logger,
            method=request.method,
            path=request.url.path,
            status_code=response.status_code,
            duration=process_time,
            request_id=request_id
        )
        
        return response
        
    except Exception as e:
        process_time = (datetime.now() - start_time).total_seconds()
        log_error(
            logger=logger,
            error=e,
            context=f"HTTP {request.method} {request.url.path}",
            request_id=request_id
        )
        raise

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
qr_service = QRService()
document_service = DocumentService()
validation_service = ValidationService()

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    logger.info("üè• Health check –∑–∞–ø—Ä–æ—Å")
    return {
        "status": "healthy",
        "service": "qr-validation-service",
        "version": "1.0.0"
    }

@app.post("/qr/generate", response_model=QRGenerateResponse)
async def generate_qr_code(request: QRGenerateRequest):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –†–î
    
    - **document_id**: ID –¥–æ–∫—É–º–µ–Ω—Ç–∞
    - **document_type**: –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ (—á–µ—Ä—Ç–µ–∂, —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è, –≤–µ–¥–æ–º–æ—Å—Ç—å –∏ —Ç.–¥.)
    - **project_id**: ID –ø—Ä–æ–µ–∫—Ç–∞
    - **version**: –í–µ—Ä—Å–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
    - **metadata**: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    """
    start_time = datetime.now()
    logger.info(f"üîß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ {request.document_id}", extra={
        "document_id": request.document_id,
        "document_type": request.document_type,
        "project_id": request.project_id,
        "version": request.version
    })
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –¥–æ–∫—É–º–µ–Ω—Ç–∞
        document = await document_service.create_or_update_document(
            document_id=request.document_id,
            document_type=request.document_type,
            project_id=request.project_id,
            version=request.version,
            document_metadata=request.metadata
        )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥
        qr_data = qr_service.generate_qr_data(document)
        qr_image = qr_service.generate_qr_image(qr_data)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º QR-–∫–æ–¥
        qr_path = await qr_service.save_qr_code(
            document_id=request.document_id,
            qr_image=qr_image,
            version=request.version
        )
        
        duration = (datetime.now() - start_time).total_seconds()
        log_performance(
            logger=logger,
            operation="generate_qr_code",
            duration=duration,
            success=True,
            document_id=request.document_id
        )
        
        log_business_event(
            logger=logger,
            event="qr_code_generated",
            document_id=request.document_id,
            project_id=request.project_id,
            document_type=request.document_type
        )
        
        logger.info(f"‚úÖ QR-–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ {request.document_id}")
        
        return QRGenerateResponse(
            document_id=request.document_id,
            qr_code_path=qr_path,
            qr_data=qr_data,
            status="generated",
            message="QR-–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω"
        )
        
    except Exception as e:
        duration = (datetime.now() - start_time).total_seconds()
        log_performance(
            logger=logger,
            operation="generate_qr_code",
            duration=duration,
            success=False,
            document_id=request.document_id
        )
        log_error(
            logger=logger,
            error=e,
            context="generate_qr_code",
            document_id=request.document_id
        )
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞: {str(e)}")

@app.post("/qr/validate", response_model=QRValidateResponse)
async def validate_qr_code(request: QRValidateRequest):
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è QR-–∫–æ–¥–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –†–î
    
    - **qr_data**: –î–∞–Ω–Ω—ã–µ QR-–∫–æ–¥–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    - **validate_signature**: –ü—Ä–æ–≤–µ—Ä—è—Ç—å –ª–∏ —Ü–∏—Ñ—Ä–æ–≤—É—é –ø–æ–¥–ø–∏—Å—å
    """
    start_time = datetime.now()
    logger.info("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è QR-–∫–æ–¥–∞", extra={
        "validate_signature": request.validate_signature,
        "qr_data_length": len(request.qr_data)
    })
    
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ QR-–∫–æ–¥–∞
        qr_info = qr_service.parse_qr_data(request.qr_data)
        document_id = qr_info.get("document_id")
        
        logger.info(f"üìã –ü–∞—Ä—Å–∏–Ω–≥ QR-–∫–æ–¥–∞ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ {document_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ
        document = await document_service.get_document(document_id)
        
        if not document:
            logger.warning(f"‚ö†Ô∏è –î–æ–∫—É–º–µ–Ω—Ç {document_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return QRValidateResponse(
                is_valid=False,
                status="not_found",
                message="–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
                document_info=None
            )
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        validation_result = await validation_service.validate_document(
            document=document,
            qr_info=qr_info,
            check_signature=request.validate_signature
        )
        
        duration = (datetime.now() - start_time).total_seconds()
        log_performance(
            logger=logger,
            operation="validate_qr_code",
            duration=duration,
            success=validation_result["is_valid"],
            document_id=document_id
        )
        
        log_business_event(
            logger=logger,
            event="qr_code_validated",
            document_id=document_id,
            is_valid=validation_result["is_valid"],
            status=validation_result["status"]
        )
        
        logger.info(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è QR-–∫–æ–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ {document_id}: {validation_result['status']}")
        
        return QRValidateResponse(
            is_valid=validation_result["is_valid"],
            status=validation_result["status"],
            message=validation_result["message"],
            document_info={
                "document_id": document.document_id,
                "document_type": document.document_type,
                "project_id": document.project_id,
                "version": document.version,
                "status": document.status,
                "created_at": document.created_at,
                "updated_at": document.updated_at,
                "metadata": document.document_metadata
            }
        )
        
    except Exception as e:
        duration = (datetime.now() - start_time).total_seconds()
        log_performance(
            logger=logger,
            operation="validate_qr_code",
            duration=duration,
            success=False
        )
        log_error(
            logger=logger,
            error=e,
            context="validate_qr_code"
        )
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ QR-–∫–æ–¥–∞: {str(e)}")

@app.post("/qr/validate-image", response_model=QRValidateResponse)
async def validate_qr_image(file: UploadFile = File(...)):
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è QR-–∫–æ–¥–∞ –∏–∑ —Ñ–∞–π–ª–∞ (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ PDF)
    
    - **file**: –§–∞–π–ª —Å QR-–∫–æ–¥–æ–º (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ PDF)
    """
    try:
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
        file_data = await file.read()
        file_type = file.content_type or "application/octet-stream"
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º QR-–∫–æ–¥ –∏–∑ —Ñ–∞–π–ª–∞
        qr_data = qr_service.extract_qr_from_file(file_data, file_type)
        
        if not qr_data:
            file_type_name = "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏" if file_type.startswith('image/') else "PDF —Ñ–∞–π–ª–µ"
            return QRValidateResponse(
                is_valid=False,
                status="no_qr_found",
                message=f"QR-–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {file_type_name}",
                document_info=None
            )
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º QR-–∫–æ–¥
        validation_request = QRValidateRequest(
            qr_data=qr_data,
            validate_signature=True
        )
        
        return await validate_qr_code(validation_request)
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")

@app.get("/qr/document/{document_id}", response_model=QRDocumentResponse)
async def get_document_info(document_id: str):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ –ø–æ ID
    
    - **document_id**: ID –¥–æ–∫—É–º–µ–Ω—Ç–∞
    """
    try:
        document = await document_service.get_document(document_id)
        
        if not document:
            raise HTTPException(status_code=404, detail="–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        return QRDocumentResponse(
            document_id=document.document_id,
            document_type=document.document_type,
            project_id=document.project_id,
            version=document.version,
            status=document.status,
            created_at=document.created_at,
            updated_at=document.updated_at,
            metadata=document.document_metadata
        )
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ: {str(e)}")

@app.get("/qr/documents", response_model=List[QRDocumentResponse])
async def get_documents(
    project_id: Optional[str] = None,
    document_type: Optional[str] = None,
    status: Optional[str] = None,
    limit: int = 100,
    offset: int = 0
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
    
    - **project_id**: –§–∏–ª—å—Ç—Ä –ø–æ ID –ø—Ä–æ–µ–∫—Ç–∞
    - **document_type**: –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –¥–æ–∫—É–º–µ–Ω—Ç–∞
    - **status**: –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
    - **limit**: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    - **offset**: –°–º–µ—â–µ–Ω–∏–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    """
    try:
        documents = await document_service.get_documents(
            project_id=project_id,
            document_type=document_type,
            status=status,
            limit=limit,
            offset=offset
        )
        
        return [
            QRDocumentResponse(
                document_id=doc.document_id,
                document_type=doc.document_type,
                project_id=doc.project_id,
                version=doc.version,
                status=doc.status,
                created_at=doc.created_at,
                updated_at=doc.updated_at,
                metadata=doc.document_metadata
            )
            for doc in documents
        ]
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {str(e)}")

@app.put("/qr/document/{document_id}/status")
async def update_document_status(
    document_id: str,
    status: DocumentStatus,
    comment: Optional[str] = None
):
    """
    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    
    - **document_id**: ID –¥–æ–∫—É–º–µ–Ω—Ç–∞
    - **status**: –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –¥–æ–∫—É–º–µ–Ω—Ç–∞
    - **comment**: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—é —Å—Ç–∞—Ç—É—Å–∞
    """
    try:
        document = await document_service.update_document_status(
            document_id=document_id,
            status=status,
            comment=comment
        )
        
        if not document:
            raise HTTPException(status_code=404, detail="–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        return {
            "document_id": document_id,
            "status": status,
            "message": "–°—Ç–∞—Ç—É—Å –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω",
            "updated_at": document.updated_at
        }
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")

@app.get("/qr/stats")
async def get_qr_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ QR-–∫–æ–¥–∞–º –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º"""
    try:
        stats = await document_service.get_statistics()
        return stats
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")

@app.get("/qr/download/{document_id}")
async def download_qr_code(document_id: str, version: Optional[str] = None):
    """
    –°–∫–∞—á–∏–≤–∞–Ω–∏–µ QR-–∫–æ–¥–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    
    - **document_id**: ID –¥–æ–∫—É–º–µ–Ω—Ç–∞
    - **version**: –í–µ—Ä—Å–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    """
    try:
        qr_path = await qr_service.get_qr_code_path(document_id, version)
        
        if not qr_path or not os.path.exists(qr_path):
            raise HTTPException(status_code=404, detail="QR-–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        return FileResponse(
            path=qr_path,
            media_type="image/png",
            filename=f"qr_{document_id}_{version or 'latest'}.png"
        )
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è QR-–∫–æ–¥–∞: {str(e)}")

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8013)
