"""
TechExpert Connector Service
–°–µ—Ä–≤–∏—Å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å API "–¢–µ—Ö—ç–∫—Å–ø–µ—Ä—Ç" –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ù–¢–î
"""

import os
import logging
import asyncio
from contextlib import asynccontextmanager
from typing import Dict, Any, Optional, List
from datetime import datetime, timedelta

from fastapi import FastAPI, HTTPException, Depends, Request, status
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
import uvicorn

from services.auth_service import AuthService
from services.techexpert_client import TechExpertClient
from services.cache_service import CacheService
from services.sync_service import SyncService
from services.circuit_breaker import CircuitBreaker
from models.schemas import (
    HealthResponse, SearchRequest, SearchResponse, DocumentMeta,
    LatestEdition, SectionsResponse, SectionContent, CitationsResponse,
    SyncStatus, SyncRequest, SyncResponse, ErrorResponse
)
from utils.logging_config import setup_logging
from utils.metrics import MetricsCollector

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
setup_logging()
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
auth_service = AuthService()
techexpert_client = TechExpertClient()
cache_service = CacheService()
sync_service = SyncService()
circuit_breaker = CircuitBreaker()
metrics = MetricsCollector()

# Security
security = HTTPBearer()

@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # Startup
    logger.info("üöÄ TechExpert Connector –∑–∞–ø—É—â–µ–Ω")
    logger.info("üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: OAuth2 + API Key")
    logger.info("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: Online-first —Å fallback")
    logger.info("üìä –ú–µ—Ç—Ä–∏–∫–∏: Prometheus + —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–æ–≥–∏")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
    await cache_service.initialize()
    await sync_service.initialize()
    
    # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
    sync_task = asyncio.create_task(sync_service.background_sync())
    
    yield
    
    # Shutdown
    logger.info("üõë TechExpert Connector –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    sync_task.cancel()
    await cache_service.close()

app = FastAPI(
    title="TechExpert Connector API",
    description="–°–µ—Ä–≤–∏—Å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å API '–¢–µ—Ö—ç–∫—Å–ø–µ—Ä—Ç' –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ù–¢–î",
    version="1.0.0",
    lifespan=lifespan
)

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –º–µ—Ç—Ä–∏–∫
@app.middleware("http")
async def logging_middleware(request: Request, call_next):
    start_time = datetime.now()
    request_id = f"req_{start_time.strftime('%Y%m%d_%H%M%S_%f')}"
    
    logger.info(f"üì• {request.method} {request.url.path}", extra={
        "request_id": request_id,
        "method": request.method,
        "path": request.url.path,
        "query_params": str(request.query_params)
    })
    
    try:
        response = await call_next(request)
        process_time = (datetime.now() - start_time).total_seconds()
        
        logger.info(f"üì§ {response.status_code} –∑–∞ {process_time:.3f}s", extra={
            "request_id": request_id,
            "status_code": response.status_code,
            "process_time": process_time
        })
        
        # –ú–µ—Ç—Ä–∏–∫–∏
        metrics.record_request(
            method=request.method,
            path=request.url.path,
            status_code=response.status_code,
            duration=process_time
        )
        
        return response
        
    except Exception as e:
        process_time = (datetime.now() - start_time).total_seconds()
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)} –∑–∞ {process_time:.3f}s", extra={
            "request_id": request_id,
            "error": str(e),
            "process_time": process_time
        })
        
        metrics.record_error(
            method=request.method,
            path=request.url.path,
            error_type=type(e).__name__
        )
        
        raise

# Dependency –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
async def get_current_user(credentials: HTTPAuthorizationCredentials = Depends(security)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–æ–∫–µ–Ω–∞"""
    try:
        user = await auth_service.verify_token(credentials.credentials)
        return user
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"
        )

# Health check
@app.get("/health", response_model=HealthResponse)
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        techexpert_status = await techexpert_client.health_check()
        cache_status = await cache_service.health_check()
        
        overall_status = "healthy"
        if techexpert_status["status"] != "up" or cache_status["status"] != "up":
            overall_status = "degraded"
        
        return HealthResponse(
            status=overall_status,
            timestamp=datetime.now(),
            services={
                "techexpert_api": techexpert_status,
                "local_index": cache_status
            },
            version="1.0.0"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ health check: {str(e)}")
        return HealthResponse(
            status="unhealthy",
            timestamp=datetime.now(),
            services={},
            version="1.0.0"
        )

# –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
@app.post("/auth/token")
async def get_auth_token(auth_request: dict):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    try:
        token = await auth_service.authenticate(
            client_id=auth_request["client_id"],
            client_secret=auth_request["client_secret"],
            scope=auth_request.get("scope", "read")
        )
        return token
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
        )

# –ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
@app.post("/documents/search", response_model=SearchResponse)
async def search_documents(
    search_request: SearchRequest,
    current_user: dict = Depends(get_current_user)
):
    """–ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cache_key = f"search:{hash(str(search_request))}"
        cached_result = await cache_service.get(cache_key)
        if cached_result:
            logger.info("–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ")
            return SearchResponse(**cached_result)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
        start_time = datetime.now()
        
        # –ü—Ä–æ–±—É–µ–º –æ–Ω–ª–∞–π–Ω –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ circuit breaker
        try:
            with circuit_breaker:
                results = await techexpert_client.search_documents(search_request)
                source = "online"
        except Exception as e:
            logger.warning(f"–û–Ω–ª–∞–π–Ω –ø–æ–∏—Å–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {str(e)}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π")
            results = await sync_service.search_local(search_request)
            source = "local"
        
        query_time = (datetime.now() - start_time).total_seconds() * 1000
        
        response = SearchResponse(
            results=results,
            total_count=len(results),
            page=search_request.offset // search_request.limit + 1,
            per_page=search_request.limit,
            query_time_ms=query_time,
            source=source
        )
        
        # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await cache_service.set(cache_key, response.dict(), ttl=300)
        
        return response
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}"
        )

# –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
@app.get("/documents/{doc_id}/meta", response_model=DocumentMeta)
async def get_document_meta(
    doc_id: str,
    edition_id: Optional[str] = None,
    current_user: dict = Depends(get_current_user)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cache_key = f"meta:{doc_id}:{edition_id or 'latest'}"
        cached_result = await cache_service.get(cache_key)
        if cached_result:
            return DocumentMeta(**cached_result)
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        try:
            with circuit_breaker:
                meta = await techexpert_client.get_document_meta(doc_id, edition_id)
                source = "techexpert"
        except Exception as e:
            logger.warning(f"–û–Ω–ª–∞–π–Ω –ø–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: {str(e)}")
            meta = await sync_service.get_local_document_meta(doc_id, edition_id)
            source = "local"
        
        if not meta:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
        
        meta["source"] = source
        response = DocumentMeta(**meta)
        
        # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await cache_service.set(cache_key, response.dict(), ttl=3600)
        
        return response
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {str(e)}"
        )

# –ü–æ—Å–ª–µ–¥–Ω—è—è —Ä–µ–¥–∞–∫—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
@app.get("/documents/{doc_id}/latest", response_model=LatestEdition)
async def get_latest_edition(
    doc_id: str,
    current_user: dict = Depends(get_current_user)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–µ–¥–∞–∫—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–µ–¥–∞–∫—Ü–∏–∏
        try:
            with circuit_breaker:
                latest_info = await techexpert_client.get_latest_edition(doc_id)
        except Exception as e:
            logger.warning(f"–û–Ω–ª–∞–π–Ω –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–¥–∞–∫—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {str(e)}")
            latest_info = await sync_service.get_local_latest_edition(doc_id)
        
        if not latest_info:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
        
        return LatestEdition(**latest_info)
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–µ–¥–∞–∫—Ü–∏–∏: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–µ–¥–∞–∫—Ü–∏–∏: {str(e)}"
        )

# –†–∞–∑–¥–µ–ª—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞
@app.get("/documents/{doc_id}/sections", response_model=SectionsResponse)
async def get_document_sections(
    doc_id: str,
    edition_id: Optional[str] = None,
    current_user: dict = Depends(get_current_user)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑–¥–µ–ª–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cache_key = f"sections:{doc_id}:{edition_id or 'latest'}"
        cached_result = await cache_service.get(cache_key)
        if cached_result:
            return SectionsResponse(**cached_result)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–¥–µ–ª—ã
        try:
            with circuit_breaker:
                sections = await techexpert_client.get_document_sections(doc_id, edition_id)
        except Exception as e:
            logger.warning(f"–û–Ω–ª–∞–π–Ω –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: {str(e)}")
            sections = await sync_service.get_local_document_sections(doc_id, edition_id)
        
        if not sections:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
        
        response = SectionsResponse(**sections)
        
        # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await cache_service.set(cache_key, response.dict(), ttl=1800)
        
        return response
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–æ–≤: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–æ–≤: {str(e)}"
        )

# –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ä–∞–∑–¥–µ–ª–∞
@app.get("/documents/{doc_id}/sections/{section_id}", response_model=SectionContent)
async def get_section_content(
    doc_id: str,
    section_id: str,
    edition_id: Optional[str] = None,
    include_metadata: bool = True,
    current_user: dict = Depends(get_current_user)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cache_key = f"content:{doc_id}:{section_id}:{edition_id or 'latest'}"
        cached_result = await cache_service.get(cache_key)
        if cached_result:
            return SectionContent(**cached_result)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        try:
            with circuit_breaker:
                content = await techexpert_client.get_section_content(
                    doc_id, section_id, edition_id, include_metadata
                )
        except Exception as e:
            logger.warning(f"–û–Ω–ª–∞–π–Ω –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: {str(e)}")
            content = await sync_service.get_local_section_content(
                doc_id, section_id, edition_id, include_metadata
            )
        
        if not content:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="–†–∞–∑–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
        
        response = SectionContent(**content)
        
        # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await cache_service.set(cache_key, response.dict(), ttl=3600)
        
        return response
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ: {str(e)}"
        )

# –°—Å—ã–ª–∫–∏ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç
@app.get("/documents/{doc_id}/citations", response_model=CitationsResponse)
async def get_document_citations(
    doc_id: str,
    edition_id: Optional[str] = None,
    limit: int = 50,
    current_user: dict = Depends(get_current_user)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, —Å—Å—ã–ª–∞—é—â–∏—Ö—Å—è –Ω–∞ –¥–∞–Ω–Ω—ã–π"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cache_key = f"citations:{doc_id}:{edition_id or 'latest'}:{limit}"
        cached_result = await cache_service.get(cache_key)
        if cached_result:
            return CitationsResponse(**cached_result)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏
        try:
            with circuit_breaker:
                citations = await techexpert_client.get_document_citations(
                    doc_id, edition_id, limit
                )
        except Exception as e:
            logger.warning(f"–û–Ω–ª–∞–π–Ω –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: {str(e)}")
            citations = await sync_service.get_local_document_citations(
                doc_id, edition_id, limit
            )
        
        response = CitationsResponse(**citations)
        
        # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await cache_service.set(cache_key, response.dict(), ttl=7200)
        
        return response
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫: {str(e)}"
        )

# –°—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
@app.get("/sync/status", response_model=SyncStatus)
async def get_sync_status(current_user: dict = Depends(get_current_user)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    try:
        status_info = await sync_service.get_sync_status()
        return SyncStatus(**status_info)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {str(e)}"
        )

# –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
@app.post("/sync/trigger", response_model=SyncResponse)
async def trigger_sync(
    sync_request: SyncRequest,
    current_user: dict = Depends(get_current_user)
):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    try:
        if not current_user.get("admin", False):
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"
            )
        
        sync_id = await sync_service.trigger_sync(sync_request)
        return SyncResponse(
            sync_id=sync_id,
            status="started",
            estimated_duration_minutes=30
        )
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {str(e)}"
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
@app.exception_handler(HTTPException)
async def http_exception_handler(request: Request, exc: HTTPException):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ HTTP –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
    return JSONResponse(
        status_code=exc.status_code,
        content=ErrorResponse(
            error=exc.detail,
            message=exc.detail,
            code=str(exc.status_code),
            timestamp=datetime.now(),
            request_id=getattr(request.state, 'request_id', 'unknown')
        ).dict()
    )

@app.exception_handler(Exception)
async def general_exception_handler(request: Request, exc: Exception):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—â–∏—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
    logger.error(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(exc)}", exc_info=True)
    return JSONResponse(
        status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
        content=ErrorResponse(
            error="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
            message="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞",
            code="500",
            timestamp=datetime.now(),
            request_id=getattr(request.state, 'request_id', 'unknown')
        ).dict()
    )

if __name__ == "__main__":
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8014,
        reload=True,
        log_level="info"
    )
