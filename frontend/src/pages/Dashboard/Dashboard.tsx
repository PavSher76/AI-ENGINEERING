import React, { useState, useEffect } from 'react';
import './Dashboard.css';

interface ServiceStatus {
  name: string;
  status: 'healthy' | 'warning' | 'error' | 'unknown';
  url: string;
  port: number;
  description: string;
  lastCheck: string;
}

const Dashboard: React.FC = () => {
  const [services, setServices] = useState<ServiceStatus[]>([]);
  const [loading, setLoading] = useState(true);
  const [lastUpdate, setLastUpdate] = useState<Date>(new Date());

  const serviceList: Omit<ServiceStatus, 'status' | 'lastCheck'>[] = [
    {
      name: 'Frontend',
      url: 'http://localhost',
      port: 80,
      description: '–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–∏—Å—Ç–µ–º—ã'
    },
    {
      name: 'Nginx',
      url: 'http://localhost',
      port: 80,
      description: 'Reverse proxy –∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–µ—Ä–≤–µ—Ä'
    },
    {
      name: 'PostgreSQL',
      url: 'http://localhost',
      port: 5432,
      description: '–û—Å–Ω–æ–≤–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö'
    },
    {
      name: 'Redis',
      url: 'http://localhost',
      port: 6379,
      description: '–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å–µ—Å—Å–∏–∏'
    },
    {
      name: 'Qdrant',
      url: 'http://localhost:6333',
      port: 6333,
      description: '–í–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö'
    },
    {
      name: 'MinIO',
      url: 'http://localhost:9001',
      port: 9001,
      description: '–§–∞–π–ª–æ–≤–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ'
    },
    {
      name: 'RabbitMQ',
      url: 'http://localhost:15672',
      port: 15672,
      description: '–û—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π'
    },
    {
      name: 'Ollama',
      url: 'http://localhost:11434',
      port: 11434,
      description: 'AI –º–æ–¥–µ–ª–∏ (–ª–æ–∫–∞–ª—å–Ω–æ)'
    },
    {
      name: 'vLLM',
      url: 'http://localhost:8002',
      port: 8002,
      description: '–í—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π LLM —Å–µ—Ä–≤–µ—Ä'
    },
    {
      name: 'RAG Service',
      url: 'http://localhost:8001',
      port: 8001,
      description: '–°–µ—Ä–≤–∏—Å –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞'
    },
    {
      name: 'Chat Service',
      url: 'http://localhost:8003',
      port: 8003,
      description: '–°–µ—Ä–≤–∏—Å —á–∞—Ç–∞ —Å –ò–ò'
    },
    {
      name: 'Consultation Service',
      url: 'http://localhost:8004',
      port: 8004,
      description: '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –ù–¢–î'
    },
    {
      name: 'Archive Service',
      url: 'http://localhost:8005',
      port: 8005,
      description: '–ê—Ä—Ö–∏–≤ –∏ –æ–±—ä–µ–∫—Ç—ã –∞–Ω–∞–ª–æ–≥–∏'
    },
    {
      name: 'Calculation Service',
      url: 'http://localhost:8006',
      port: 8006,
      description: '–ò–Ω–∂–µ–Ω–µ—Ä–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã'
    },
    {
      name: 'Validation Service',
      url: 'http://localhost:8007',
      port: 8007,
      description: '–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö'
    },
    {
      name: 'Document Service',
      url: 'http://localhost:8008',
      port: 8008,
      description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏'
    },
    {
      name: 'Analytics Service',
      url: 'http://localhost:8009',
      port: 8009,
      description: '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤'
    },
    {
      name: 'Integration Service',
      url: 'http://localhost:8010',
      port: 8010,
      description: '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å PLM'
    },
    {
      name: 'Outgoing Control Service',
      url: 'http://localhost:8011',
      port: 8011,
      description: '–í—ã—Ö–æ–¥–Ω–æ–π –∫–æ–Ω—Ç—Ä–æ–ª—å –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤'
    },
    {
      name: 'Ollama Management Service',
      url: 'http://localhost:8012',
      port: 8012,
      description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª—è–º–∏ Ollama'
    }
  ];

  const checkServiceStatus = async (service: Omit<ServiceStatus, 'status' | 'lastCheck'>): Promise<ServiceStatus> => {
    try {
      const response = await fetch(`${service.url}/health`, {
        method: 'GET',
        timeout: 5000,
      } as any);
      
      if (response.ok) {
        return {
          ...service,
          status: 'healthy',
          lastCheck: new Date().toLocaleTimeString()
        };
      } else {
        return {
          ...service,
          status: 'warning',
          lastCheck: new Date().toLocaleTimeString()
        };
      }
    } catch (error) {
      return {
        ...service,
        status: 'error',
        lastCheck: new Date().toLocaleTimeString()
      };
    }
  };

  const checkAllServices = async () => {
    setLoading(true);
    const promises = serviceList.map(service => checkServiceStatus(service));
    const results = await Promise.all(promises);
    setServices(results);
    setLastUpdate(new Date());
    setLoading(false);
  };

  useEffect(() => {
    checkAllServices();
    const interval = setInterval(checkAllServices, 30000); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    return () => clearInterval(interval);
  }, []);

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'healthy':
        return '‚úÖ';
      case 'warning':
        return '‚ö†Ô∏è';
      case 'error':
        return '‚ùå';
      default:
        return '‚ùì';
    }
  };

  const getStatusClass = (status: string) => {
    switch (status) {
      case 'healthy':
        return 'status-success';
      case 'warning':
        return 'status-warning';
      case 'error':
        return 'status-error';
      default:
        return 'status-info';
    }
  };

  const healthyCount = services.filter(s => s.status === 'healthy').length;
  const warningCount = services.filter(s => s.status === 'warning').length;
  const errorCount = services.filter(s => s.status === 'error').length;

  return (
    <div className="dashboard">
      <div className="dashboard-header">
        <h1>–î–∞—à–±–æ—Ä–¥ —Å–∏—Å—Ç–µ–º—ã</h1>
        <p>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –∏ –º–æ–¥—É–ª–µ–π</p>
        <div className="dashboard-actions">
          <button className="btn btn-primary" onClick={checkAllServices} disabled={loading}>
            {loading ? '–ü—Ä–æ–≤–µ—Ä–∫–∞...' : '–û–±–Ω–æ–≤–∏—Ç—å'}
          </button>
          <span className="last-update">
            –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {lastUpdate.toLocaleTimeString()}
          </span>
        </div>
      </div>

      <div className="dashboard-stats">
        <div className="stat-card">
          <div className="stat-icon">‚úÖ</div>
          <div className="stat-content">
            <div className="stat-number">{healthyCount}</div>
            <div className="stat-label">–†–∞–±–æ—Ç–∞—é—Ç</div>
          </div>
        </div>
        <div className="stat-card">
          <div className="stat-icon">‚ö†Ô∏è</div>
          <div className="stat-content">
            <div className="stat-number">{warningCount}</div>
            <div className="stat-label">–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è</div>
          </div>
        </div>
        <div className="stat-card">
          <div className="stat-icon">‚ùå</div>
          <div className="stat-content">
            <div className="stat-number">{errorCount}</div>
            <div className="stat-label">–û—à–∏–±–∫–∏</div>
          </div>
        </div>
        <div className="stat-card">
          <div className="stat-icon">üìä</div>
          <div className="stat-content">
            <div className="stat-number">{services.length}</div>
            <div className="stat-label">–í—Å–µ–≥–æ —Å–µ—Ä–≤–∏—Å–æ–≤</div>
          </div>
        </div>
      </div>

      <div className="services-grid">
        {services.map((service, index) => (
          <div key={index} className="service-card card">
            <div className="card-header">
              <div className="service-header">
                <h3 className="card-title">{service.name}</h3>
                <span className={`status ${getStatusClass(service.status)}`}>
                  <span className="status-icon">
                    {getStatusIcon(service.status)}
                  </span>
                  {service.status === 'healthy' ? '–†–∞–±–æ—Ç–∞–µ—Ç' : 
                   service.status === 'warning' ? '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ' : 
                   service.status === 'error' ? '–û—à–∏–±–∫–∞' : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
                </span>
              </div>
            </div>
            <div className="card-body">
              <p className="service-description">{service.description}</p>
              <div className="service-details">
                <div className="detail-item">
                  <span className="detail-label">URL:</span>
                  <a href={service.url} target="_blank" rel="noopener noreferrer" className="detail-value">
                    {service.url}
                  </a>
                </div>
                <div className="detail-item">
                  <span className="detail-label">–ü–æ—Ä—Ç:</span>
                  <span className="detail-value">{service.port}</span>
                </div>
                <div className="detail-item">
                  <span className="detail-label">–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞:</span>
                  <span className="detail-value">{service.lastCheck}</span>
                </div>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default Dashboard;