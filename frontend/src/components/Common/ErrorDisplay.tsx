import React, { useState } from 'react';
import { ErrorInfo } from '../../utils/errorHandler';
import './ErrorDisplay.css';

interface ErrorDisplayProps {
  error: ErrorInfo | null;
  onRetry?: () => void;
  onDismiss?: () => void;
  showDetails?: boolean;
}

const ErrorDisplay: React.FC<ErrorDisplayProps> = ({
  error,
  onRetry,
  onDismiss,
  showDetails = false
}) => {
  const [showFullDetails, setShowFullDetails] = useState(false);

  if (!error) return null;

  const getErrorIcon = (type: string) => {
    switch (type) {
      case 'network':
        return 'üåê';
      case 'server':
        return 'üñ•Ô∏è';
      case 'validation':
        return '‚ö†Ô∏è';
      case 'file':
        return 'üìÅ';
      case 'auth':
        return 'üîê';
      case 'timeout':
        return '‚è±Ô∏è';
      default:
        return '‚ùå';
    }
  };

  const getErrorColor = (type: string) => {
    switch (type) {
      case 'network':
        return '#ff6b6b';
      case 'server':
        return '#ffa726';
      case 'validation':
        return '#ff9800';
      case 'file':
        return '#9c27b0';
      case 'auth':
        return '#f44336';
      case 'timeout':
        return '#607d8b';
      default:
        return '#f44336';
    }
  };

  return (
    <div className="error-display" style={{ borderColor: getErrorColor(error.type) }}>
      <div className="error-header">
        <div className="error-icon">
          {getErrorIcon(error.type)}
        </div>
        <div className="error-content">
          <div className="error-title">
            {error.userMessage}
          </div>
          <div className="error-suggestion">
            {error.suggestion}
          </div>
        </div>
        <div className="error-actions">
          {onDismiss && (
            <button
              className="error-dismiss-btn"
              onClick={onDismiss}
              title="–ó–∞–∫—Ä—ã—Ç—å"
            >
              ‚úï
            </button>
          )}
        </div>
      </div>

      {showDetails && (
        <div className="error-details">
          <button
            className="error-details-toggle"
            onClick={() => setShowFullDetails(!showFullDetails)}
          >
            {showFullDetails ? '–°–∫—Ä—ã—Ç—å –¥–µ—Ç–∞–ª–∏' : '–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏'}
          </button>
          
          {showFullDetails && (
            <div className="error-details-content">
              <div className="error-detail-item">
                <strong>–¢–∏–ø –æ—à–∏–±–∫–∏:</strong> {error.type}
              </div>
              {error.code && (
                <div className="error-detail-item">
                  <strong>–ö–æ–¥:</strong> {error.code}
                </div>
              )}
              <div className="error-detail-item">
                <strong>–°–æ–æ–±—â–µ–Ω–∏–µ:</strong> {error.message}
              </div>
              {error.details && (
                <div className="error-detail-item">
                  <strong>–î–µ—Ç–∞–ª–∏:</strong>
                  <pre className="error-details-json">
                    {JSON.stringify(error.details, null, 2)}
                  </pre>
                </div>
              )}
            </div>
          )}
        </div>
      )}

      {error.canRetry && onRetry && (
        <div className="error-retry">
          <button
            className="error-retry-btn"
            onClick={onRetry}
          >
            üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
          </button>
          {error.retryDelay && (
            <span className="error-retry-delay">
              (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ {error.retryDelay / 1000}—Å)
            </span>
          )}
        </div>
      )}
    </div>
  );
};

export default ErrorDisplay;
