"""
–ï–¥–∏–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ AI Engineering
"""

import logging
import logging.handlers
import sys
import os
import json
from datetime import datetime
from typing import Dict, Any, Optional
from pathlib import Path


class StructuredFormatter(logging.Formatter):
    """–§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ JSON"""
    
    def format(self, record):
        log_entry = {
            "timestamp": datetime.fromtimestamp(record.created).isoformat(),
            "level": record.levelname,
            "logger": record.name,
            "message": record.getMessage(),
            "module": record.module,
            "function": record.funcName,
            "line": record.lineno
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –µ—Å–ª–∏ –µ—Å—Ç—å
        if hasattr(record, 'user_id'):
            log_entry['user_id'] = record.user_id
        if hasattr(record, 'request_id'):
            log_entry['request_id'] = record.request_id
        if hasattr(record, 'service'):
            log_entry['service'] = record.service
        if hasattr(record, 'duration'):
            log_entry['duration'] = record.duration
        if hasattr(record, 'error_type'):
            log_entry['error_type'] = record.error_type
            
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        if record.exc_info:
            log_entry['exception'] = self.formatException(record.exc_info)
            
        return json.dumps(log_entry, ensure_ascii=False)


class ColoredFormatter(logging.Formatter):
    """–¶–≤–µ—Ç–Ω–æ–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏"""
    
    COLORS = {
        'DEBUG': '\033[36m',    # Cyan
        'INFO': '\033[32m',     # Green
        'WARNING': '\033[33m',  # Yellow
        'ERROR': '\033[31m',    # Red
        'CRITICAL': '\033[35m', # Magenta
        'RESET': '\033[0m'      # Reset
    }
    
    def format(self, record):
        color = self.COLORS.get(record.levelname, self.COLORS['RESET'])
        reset = self.COLORS['RESET']
        
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π
        emoji_map = {
            'DEBUG': 'üîç',
            'INFO': '‚ÑπÔ∏è',
            'WARNING': '‚ö†Ô∏è',
            'ERROR': '‚ùå',
            'CRITICAL': 'üö®'
        }
        emoji = emoji_map.get(record.levelname, 'üìù')
        
        record.levelname = f"{color}{emoji} {record.levelname}{reset}"
        return super().format(record)


def setup_logging(
    service_name: str,
    log_level: str = "INFO",
    log_dir: str = "/app/logs",
    enable_file_logging: bool = True,
    enable_console_logging: bool = True,
    enable_json_logging: bool = False,
    max_file_size: int = 10 * 1024 * 1024,  # 10MB
    backup_count: int = 5
) -> logging.Logger:
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞
    
    Args:
        service_name: –ò–º—è —Å–µ—Ä–≤–∏—Å–∞
        log_level: –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (DEBUG, INFO, WARNING, ERROR, CRITICAL)
        log_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –ª–æ–≥–æ–≤
        enable_file_logging: –í–∫–ª—é—á–∏—Ç—å —Ñ–∞–π–ª–æ–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        enable_console_logging: –í–∫–ª—é—á–∏—Ç—å –∫–æ–Ω—Å–æ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        enable_json_logging: –í–∫–ª—é—á–∏—Ç—å JSON –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        max_file_size: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ª–æ–≥–∞
        backup_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏
    
    Returns:
        –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä
    """
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
    if enable_file_logging:
        os.makedirs(log_dir, exist_ok=True)
    
    # –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä
    logger = logging.getLogger(service_name)
    logger.setLevel(getattr(logging, log_level.upper()))
    
    # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã
    logger.handlers.clear()
    
    # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä
    if enable_console_logging:
        console_handler = logging.StreamHandler(sys.stdout)
        if enable_json_logging:
            console_handler.setFormatter(StructuredFormatter())
        else:
            console_handler.setFormatter(ColoredFormatter(
                '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
            ))
        logger.addHandler(console_handler)
    
    # –§–∞–π–ª–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä —Å —Ä–æ—Ç–∞—Ü–∏–µ–π
    if enable_file_logging:
        log_file = os.path.join(log_dir, f"{service_name}.log")
        
        # –û–±—ã—á–Ω—ã–π —Ñ–∞–π–ª–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä
        file_handler = logging.handlers.RotatingFileHandler(
            log_file,
            maxBytes=max_file_size,
            backupCount=backup_count,
            encoding='utf-8'
        )
        
        if enable_json_logging:
            file_handler.setFormatter(StructuredFormatter())
        else:
            file_handler.setFormatter(logging.Formatter(
                '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
            ))
        logger.addHandler(file_handler)
        
        # –û—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –æ—à–∏–±–æ–∫
        error_log_file = os.path.join(log_dir, f"{service_name}_errors.log")
        error_handler = logging.handlers.RotatingFileHandler(
            error_log_file,
            maxBytes=max_file_size,
            backupCount=backup_count,
            encoding='utf-8'
        )
        error_handler.setLevel(logging.ERROR)
        error_handler.setFormatter(StructuredFormatter() if enable_json_logging else logging.Formatter(
            '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        ))
        logger.addHandler(error_handler)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Ä–æ–≤–Ω–µ–π –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
    logging.getLogger("httpx").setLevel(logging.WARNING)
    logging.getLogger("urllib3").setLevel(logging.WARNING)
    logging.getLogger("asyncio").setLevel(logging.WARNING)
    logging.getLogger("uvicorn.access").setLevel(logging.WARNING)
    logging.getLogger("fastapi").setLevel(logging.INFO)
    
    # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É
    logger.info(f"üöÄ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ {service_name}")
    logger.info(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–æ–≥–æ–≤: {log_dir}")
    logger.info(f"üìä –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {log_level}")
    
    return logger


def get_logger(service_name: str) -> logging.Logger:
    """–ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–≥–µ—Ä –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞"""
    return logging.getLogger(service_name)


def log_request(logger: logging.Logger, method: str, path: str, 
                status_code: int, duration: float, request_id: str = None, 
                user_id: str = None, **kwargs):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–∞"""
    extra = {
        'request_id': request_id,
        'user_id': user_id,
        'duration': duration,
        'method': method,
        'path': path,
        'status_code': status_code,
        **kwargs
    }
    
    if status_code >= 400:
        logger.warning(f"HTTP {method} {path} -> {status_code} ({duration:.3f}s)", extra=extra)
    else:
        logger.info(f"HTTP {method} {path} -> {status_code} ({duration:.3f}s)", extra=extra)


def log_error(logger: logging.Logger, error: Exception, context: str = "", 
              request_id: str = None, user_id: str = None, **kwargs):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏"""
    extra = {
        'request_id': request_id,
        'user_id': user_id,
        'error_type': type(error).__name__,
        'context': context,
        **kwargs
    }
    
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ {context}: {str(error)}", extra=extra, exc_info=True)


def log_performance(logger: logging.Logger, operation: str, duration: float, 
                   success: bool = True, **kwargs):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    extra = {
        'operation': operation,
        'duration': duration,
        'success': success,
        **kwargs
    }
    
    if success:
        logger.info(f"‚ö° {operation} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞ {duration:.3f}s", extra=extra)
    else:
        logger.warning(f"‚ö° {operation} –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞ {duration:.3f}s", extra=extra)


def log_business_event(logger: logging.Logger, event: str, **kwargs):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å-—Å–æ–±—ã—Ç–∏–π"""
    extra = {
        'event': event,
        **kwargs
    }
    
    logger.info(f"üìä –ë–∏–∑–Ω–µ—Å-—Å–æ–±—ã—Ç–∏–µ: {event}", extra=extra)


# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
LOGGING_CONFIGS = {
    "chat-service": {
        "log_level": "INFO",
        "enable_json_logging": False,
        "max_file_size": 20 * 1024 * 1024,  # 20MB –¥–ª—è —á–∞—Ç–∞
        "backup_count": 10
    },
    "qr-validation-service": {
        "log_level": "INFO", 
        "enable_json_logging": True,
        "max_file_size": 10 * 1024 * 1024,
        "backup_count": 5
    },
    "techexpert-connector": {
        "log_level": "INFO",
        "enable_json_logging": True,
        "max_file_size": 15 * 1024 * 1024,
        "backup_count": 7
    },
    "rag-service": {
        "log_level": "DEBUG",
        "enable_json_logging": True,
        "max_file_size": 25 * 1024 * 1024,  # –ë–æ–ª—å—à–µ –¥–ª—è RAG
        "backup_count": 10
    },
    "ollama-service": {
        "log_level": "INFO",
        "enable_json_logging": False,
        "max_file_size": 10 * 1024 * 1024,
        "backup_count": 5
    },
    "outgoing-control-service": {
        "log_level": "INFO",
        "enable_json_logging": True,
        "max_file_size": 15 * 1024 * 1024,
        "backup_count": 7
    }
}


def setup_service_logging(service_name: str, **overrides) -> logging.Logger:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"""
    config = LOGGING_CONFIGS.get(service_name, {})
    config.update(overrides)
    
    return setup_logging(
        service_name=service_name,
        **config
    )
