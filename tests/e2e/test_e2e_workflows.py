"""
End-to-End —Ç–µ—Å—Ç—ã –¥–ª—è –ø–æ–ª–Ω—ã—Ö —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
"""

import pytest
import asyncio
import httpx
import json
from pathlib import Path

class TestE2EWorkflows:
    """E2E —Ç–µ—Å—Ç—ã –¥–ª—è –ø–æ–ª–Ω—ã—Ö —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
    
    @pytest.fixture
    async def client(self):
        """HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
        async with httpx.AsyncClient(timeout=120.0) as client:
            yield client
    
    @pytest.fixture
    def test_document(self):
        """–¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç"""
        return {
            "filename": "test_engineering_document.pdf",
            "content": """
            –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            
            –û–±—ä–µ–∫—Ç: –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–µ –∑–¥–∞–Ω–∏–µ
            –ü–ª–æ—â–∞–¥—å: 1000 –º¬≤
            –≠—Ç–∞–∂–Ω–æ—Å—Ç—å: 2 —ç—Ç–∞–∂–∞
            –ú–∞—Ç–µ—Ä–∏–∞–ª: –ñ–µ–ª–µ–∑–æ–±–µ—Ç–æ–Ω
            
            –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
            1. –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –°–ù–∏–ü 2.01.07-85
            2. –°–µ–π—Å–º–∏—á–Ω–æ—Å—Ç—å: 7 –±–∞–ª–ª–æ–≤
            3. –ü–æ–∂–∞—Ä–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: II —Å—Ç–µ–ø–µ–Ω—å –æ–≥–Ω–µ—Å—Ç–æ–π–∫–æ—Å—Ç–∏
            
            –†–∞—Å—á–µ—Ç—ã:
            - –ù–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç: 200 –∫–ù/–º¬≤
            - –ü—Ä–æ–ª–µ—Ç –±–∞–ª–æ–∫: 6 –º–µ—Ç—Ä–æ–≤
            - –í—ã—Å–æ—Ç–∞ —ç—Ç–∞–∂–∞: 3.6 –º–µ—Ç—Ä–∞
            """,
            "metadata": {
                "author": "–ò–Ω–∂–µ–Ω–µ—Ä-–ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤—â–∏–∫",
                "project": "–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–µ –∑–¥–∞–Ω–∏–µ",
                "document_type": "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ_–∑–∞–¥–∞–Ω–∏–µ",
                "created_at": "2025-01-01T00:00:00Z"
            }
        }
    
    @pytest.mark.e2e
    @pytest.mark.slow
    async def test_document_processing_workflow(self, client, test_document):
        """E2E —Ç–µ—Å—Ç: –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        try:
            print("\nüîÑ E2E –¢–µ—Å—Ç: –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
            
            # 1. –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≤ RAG
            print("1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏...")
            collection_response = await client.post(
                "http://localhost:8001/collections",
                json={
                    "name": "e2e-test-collection",
                    "description": "–ö–æ–ª–ª–µ–∫—Ü–∏—è –¥–ª—è E2E —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
                    "embedding_model": "sentence-transformers/all-MiniLM-L6-v2"
                }
            )
            assert collection_response.status_code in [200, 201, 409]
            print("‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞/—Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
            # 2. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ RAG
            print("2Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
            document_response = await client.post(
                "http://localhost:8001/documents",
                json=test_document
            )
            assert document_response.status_code in [200, 201]
            document_data = document_response.json()
            document_id = document_data.get("document_id")
            print(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω: {document_id}")
            
            # 3. –ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            print("3Ô∏è‚É£ –ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
            search_response = await client.post(
                "http://localhost:8001/search",
                json={
                    "query": "–ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–µ –∑–¥–∞–Ω–∏–µ",
                    "collection_name": "e2e-test-collection",
                    "limit": 5
                }
            )
            assert search_response.status_code == 200
            search_data = search_response.json()
            assert "results" in search_data
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(search_data['results'])}")
            
            # 4. –ß–∞—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞
            print("4Ô∏è‚É£ –ß–∞—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º...")
            chat_response = await client.post(
                "http://localhost:8003/chat/send",
                json={
                    "message": "–†–∞—Å—Å–∫–∞–∂–∏ –æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è—Ö –∫ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–º—É –∑–¥–∞–Ω–∏—é",
                    "user_id": "e2e-test-user",
                    "session_id": "e2e-test-session",
                    "context": {
                        "project_id": "e2e-test-project",
                        "collection_name": "e2e-test-collection"
                    }
                }
            )
            assert chat_response.status_code in [200, 201]
            chat_data = chat_response.json()
            assert "response" in chat_data
            print("‚úÖ –ß–∞—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            print("üéâ E2E —Ç–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            
        except httpx.ConnectError as e:
            pytest.skip(f"–°–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")
        except Exception as e:
            pytest.fail(f"E2E —Ç–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
    
    @pytest.mark.e2e
    @pytest.mark.slow
    async def test_ai_calculation_workflow(self, client):
        """E2E —Ç–µ—Å—Ç: –ò–ò —Ä–∞—Å—á–µ—Ç—ã"""
        try:
            print("\nüîÑ E2E –¢–µ—Å—Ç: –ò–ò —Ä–∞—Å—á–µ—Ç—ã")
            
            # 1. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
            print("1Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π...")
            models_response = await client.get("http://localhost:8012/models")
            assert models_response.status_code == 200
            models = models_response.json()
            assert len(models) > 0
            model_name = models[0]["name"]
            print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å: {model_name}")
            
            # 2. –ò–Ω–∂–µ–Ω–µ—Ä–Ω—ã–π —Ä–∞—Å—á–µ—Ç —á–µ—Ä–µ–∑ –ò–ò
            print("2Ô∏è‚É£ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞...")
            calculation_response = await client.post(
                "http://localhost:8006/calculate",
                json={
                    "calculation_type": "beam_load",
                    "parameters": {
                        "length": 6.0,
                        "width": 0.3,
                        "height": 0.5,
                        "material": "concrete",
                        "load": 200
                    },
                    "model": model_name
                }
            )
            assert calculation_response.status_code in [200, 201]
            calculation_data = calculation_response.json()
            assert "result" in calculation_data
            print("‚úÖ –†–∞—Å—á–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω")
            
            # 3. –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            print("3Ô∏è‚É£ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...")
            validation_response = await client.post(
                "http://localhost:8007/validate",
                json={
                    "data": calculation_data["result"],
                    "validation_type": "engineering_calculation",
                    "standards": ["SNIP", "GOST"]
                }
            )
            assert validation_response.status_code == 200
            validation_data = validation_response.json()
            assert "is_valid" in validation_data
            print(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è: {'–ø—Ä–æ–π–¥–µ–Ω–∞' if validation_data['is_valid'] else '–Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞'}")
            
            print("üéâ E2E —Ç–µ—Å—Ç –ò–ò —Ä–∞—Å—á–µ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            
        except httpx.ConnectError as e:
            pytest.skip(f"–°–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")
        except Exception as e:
            pytest.fail(f"E2E —Ç–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
    
    @pytest.mark.e2e
    @pytest.mark.slow
    async def test_document_quality_control_workflow(self, client):
        """E2E —Ç–µ—Å—Ç: –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        try:
            print("\nüîÑ E2E –¢–µ—Å—Ç: –ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
            
            # 1. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            print("1Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
            test_text = """
            –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–≥–æ –∑–¥–∞–Ω–∏—è.
            
            –û–±—ä–µ–∫—Ç: –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–µ –∑–¥–∞–Ω–∏–µ
            –ü–ª–æ—â–∞–¥—å: 1000 –º¬≤
            –≠—Ç–∞–∂–Ω–æ—Å—Ç—å: 2 —ç—Ç–∞–∂–∞
            –ú–∞—Ç–µ—Ä–∏–∞–ª: –ñ–µ–ª–µ–∑–æ–±–µ—Ç–æ–Ω
            
            –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
            1. –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –°–ù–∏–ü 2.01.07-85
            2. –°–µ–π—Å–º–∏—á–Ω–æ—Å—Ç—å: 7 –±–∞–ª–ª–æ–≤
            3. –ü–æ–∂–∞—Ä–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: II —Å—Ç–µ–ø–µ–Ω—å –æ–≥–Ω–µ—Å—Ç–æ–π–∫–æ—Å—Ç–∏
            """
            
            # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏
            print("2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏...")
            spell_response = await client.post(
                "http://localhost:8011/spell-check",
                json={"text": test_text}
            )
            assert spell_response.status_code == 200
            spell_data = spell_response.json()
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –æ—à–∏–±–æ–∫: {spell_data.get('errors_found', 0)}")
            
            # 3. –ê–Ω–∞–ª–∏–∑ —Å—Ç–∏–ª—è
            print("3Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ —Å—Ç–∏–ª—è...")
            style_response = await client.post(
                "http://localhost:8011/style-analysis",
                json={
                    "text": test_text,
                    "document_type": "technical"
                }
            )
            assert style_response.status_code == 200
            style_data = style_response.json()
            print(f"‚úÖ –ë–∞–ª–ª —Å—Ç–∏–ª—è: {style_data.get('business_style_score', 0)}")
            
            # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç—Ç–∏–∫–∏
            print("4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç—Ç–∏–∫–∏...")
            ethics_response = await client.post(
                "http://localhost:8011/ethics-check",
                json={"text": test_text}
            )
            assert ethics_response.status_code == 200
            ethics_data = ethics_response.json()
            print(f"‚úÖ –≠—Ç–∏—á–µ—Å–∫–∏–π –±–∞–ª–ª: {ethics_data.get('ethics_score', 0)}")
            
            # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏–∏
            print("5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏–∏...")
            term_response = await client.post(
                "http://localhost:8011/terminology-check",
                json={
                    "text": test_text,
                    "domain": "engineering"
                }
            )
            assert term_response.status_code == 200
            term_data = term_response.json()
            print(f"‚úÖ –¢–æ—á–Ω–æ—Å—Ç—å —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏–∏: {term_data.get('accuracy_score', 0)}%")
            
            print("üéâ E2E —Ç–µ—Å—Ç –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            
        except httpx.ConnectError as e:
            pytest.skip(f"–°–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")
        except Exception as e:
            pytest.fail(f"E2E —Ç–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
    
    @pytest.mark.e2e
    @pytest.mark.slow
    async def test_consultation_workflow(self, client):
        """E2E —Ç–µ—Å—Ç: –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –ù–¢–î"""
        try:
            print("\nüîÑ E2E –¢–µ—Å—Ç: –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –ù–¢–î")
            
            # 1. –ü–æ–∏—Å–∫ –ù–¢–î
            print("1Ô∏è‚É£ –ü–æ–∏—Å–∫ –ù–¢–î...")
            ntd_search_response = await client.post(
                "http://localhost:8004/consultation/search",
                json={
                    "query": "–°–ù–∏–ü 2.01.07-85",
                    "document_type": "normative",
                    "category": "loads"
                }
            )
            assert ntd_search_response.status_code == 200
            ntd_data = ntd_search_response.json()
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ù–¢–î: {len(ntd_data.get('results', []))}")
            
            # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
            print("2Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏...")
            consultation_response = await client.post(
                "http://localhost:8004/consultation/ask",
                json={
                    "question": "–ö–∞–∫–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏ —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –ø—Ä–∏ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–æ–≤?",
                    "context": {
                        "project_type": "industrial",
                        "region": "seismic_zone"
                    }
                }
            )
            assert consultation_response.status_code == 200
            consultation_data = consultation_response.json()
            assert "answer" in consultation_data
            print("‚úÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞")
            
            # 3. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∞—Ä—Ö–∏–≤
            print("3Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∞—Ä—Ö–∏–≤...")
            archive_response = await client.post(
                "http://localhost:8005/archive/save",
                json={
                    "consultation_id": consultation_data.get("consultation_id"),
                    "category": "ntd_consultation",
                    "tags": ["–°–ù–∏–ü", "–Ω–∞–≥—Ä—É–∑–∫–∏", "—Ñ—É–Ω–¥–∞–º–µ–Ω—Ç—ã"]
                }
            )
            assert archive_response.status_code in [200, 201]
            print("‚úÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –∞—Ä—Ö–∏–≤")
            
            print("üéâ E2E —Ç–µ—Å—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            
        except httpx.ConnectError as e:
            pytest.skip(f"–°–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")
        except Exception as e:
            pytest.fail(f"E2E —Ç–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
    
    @pytest.mark.e2e
    @pytest.mark.slow
    async def test_analytics_workflow(self, client):
        """E2E —Ç–µ—Å—Ç: –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã"""
        try:
            print("\nüîÑ E2E –¢–µ—Å—Ç: –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã")
            
            # 1. –°–±–æ—Ä –º–µ—Ç—Ä–∏–∫
            print("1Ô∏è‚É£ –°–±–æ—Ä –º–µ—Ç—Ä–∏–∫...")
            metrics_response = await client.get("http://localhost:8009/analytics/metrics")
            assert metrics_response.status_code == 200
            metrics_data = metrics_response.json()
            print("‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ —Å–æ–±—Ä–∞–Ω—ã")
            
            # 2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
            print("2Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...")
            report_response = await client.post(
                "http://localhost:8009/analytics/reports/generate",
                json={
                    "report_type": "system_performance",
                    "period": "last_24_hours",
                    "format": "json"
                }
            )
            assert report_response.status_code in [200, 201]
            report_data = report_response.json()
            assert "report_id" in report_data
            print("‚úÖ –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
            
            # 3. –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
            print("3Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞...")
            get_report_response = await client.get(
                f"http://localhost:8009/analytics/reports/{report_data['report_id']}"
            )
            assert get_report_response.status_code == 200
            print("‚úÖ –û—Ç—á–µ—Ç –ø–æ–ª—É—á–µ–Ω")
            
            print("üéâ E2E —Ç–µ—Å—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            
        except httpx.ConnectError as e:
            pytest.skip(f"–°–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")
        except Exception as e:
            pytest.fail(f"E2E —Ç–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")

class TestE2EPerformance:
    """E2E —Ç–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    
    @pytest.fixture
    async def client(self):
        async with httpx.AsyncClient(timeout=60.0) as client:
            yield client
    
    @pytest.mark.e2e
    @pytest.mark.slow
    async def test_concurrent_requests(self, client):
        """–¢–µ—Å—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        import asyncio
        import time
        
        print("\nüîÑ E2E –¢–µ—Å—Ç: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã")
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        tasks = []
        
        # 10 –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ —Ä–∞–∑–Ω—ã–º —Å–µ—Ä–≤–∏—Å–∞–º
        for i in range(10):
            if i % 3 == 0:
                task = client.get("http://localhost:8001/health")
            elif i % 3 == 1:
                task = client.get("http://localhost:8003/health")
            else:
                task = client.get("http://localhost:8012/health")
            tasks.append(task)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        start_time = time.time()
        try:
            responses = await asyncio.gather(*tasks, return_exceptions=True)
            end_time = time.time()
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            successful = sum(1 for r in responses if not isinstance(r, Exception) and r.status_code == 200)
            total_time = end_time - start_time
            
            print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {successful}/{len(tasks)}")
            print(f"‚úÖ –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.2f} —Å–µ–∫—É–Ω–¥")
            print(f"‚úÖ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—Ä–æ—Å: {total_time/len(tasks):.2f} —Å–µ–∫—É–Ω–¥")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–æ—Ç—è –±—ã 80% –∑–∞–ø—Ä–æ—Å–æ–≤ —É—Å–ø–µ—à–Ω—ã
            success_rate = successful / len(tasks)
            assert success_rate >= 0.8, f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å {success_rate:.1%} –Ω–∏–∂–µ —Ç—Ä–µ–±—É–µ–º—ã—Ö 80%"
            
        except Exception as e:
            pytest.fail(f"–¢–µ—Å—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")

if __name__ == "__main__":
    pytest.main([__file__, "-v", "--tb=short"])
