#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –º–æ–¥—É–ª—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è
"""

import subprocess
import sys
import os
from pathlib import Path

def run_tests():
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    project_root = Path(__file__).parent.parent
    os.chdir(project_root)
    
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –º–æ–¥—É–ª—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è...")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω
    try:
        import httpx
        response = httpx.get("http://localhost:8011/health", timeout=5)
        if response.status_code != 200:
            print("‚ùå –°–µ—Ä–≤–∏—Å –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
            print("   –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–∏—Å: docker-compose up -d outgoing-control-service")
            return False
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–∏—Å—É: {e}")
        print("   –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–∏—Å: docker-compose up -d outgoing-control-service")
        return False
    
    print("‚úÖ –°–µ—Ä–≤–∏—Å –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–æ—Å—Ç—É–ø–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
    test_file = project_root / "test_data" / "E320.E32C-OUT-03484_–æ—Ç_20.05.2025_—Å_–≥—Ä—É–±—ã–º–∏_–æ—à–∏–±–∫–∞–º–∏.pdf"
    if not test_file.exists():
        print(f"‚ùå –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {test_file}")
        return False
    
    print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω: {test_file.name}")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    print("\nüì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è —Ç–µ—Å—Ç–æ–≤...")
    try:
        subprocess.run([
            sys.executable, "-m", "pip", "install", "-r", "tests/requirements.txt"
        ], check=True, capture_output=True)
        print("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
        return False
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    print("\nüöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...")
    print("=" * 60)
    
    test_commands = [
        # –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã
        ["python", "-m", "pytest", "tests/outgoing_control/test_outgoing_control.py::TestOutgoingControl::test_service_health", "-v"],
        
        # –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        ["python", "-m", "pytest", "tests/outgoing_control/test_outgoing_control.py::TestOutgoingControl::test_upload_document", "-v"],
        
        # –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏
        ["python", "-m", "pytest", "tests/outgoing_control/test_outgoing_control.py::TestOutgoingControl::test_spelling_check", "-v"],
        
        # –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∏–ª—è
        ["python", "-m", "pytest", "tests/outgoing_control/test_outgoing_control.py::TestOutgoingControl::test_style_analysis", "-v"],
        
        # –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —ç—Ç–∏–∫–∏
        ["python", "-m", "pytest", "tests/outgoing_control/test_outgoing_control.py::TestOutgoingControl::test_ethics_check", "-v"],
        
        # –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏–∏
        ["python", "-m", "pytest", "tests/outgoing_control/test_outgoing_control.py::TestOutgoingControl::test_terminology_check", "-v"],
        
        # –¢–µ—Å—Ç LLM –æ–±–∑–æ—Ä–∞
        ["python", "-m", "pytest", "tests/outgoing_control/test_outgoing_control.py::TestOutgoingControl::test_llm_review", "-v"],
        
        # –ü–æ–ª–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç
        ["python", "-m", "pytest", "tests/outgoing_control/test_outgoing_control.py::TestOutgoingControlIntegration::test_full_document_processing_workflow", "-v", "-s"],
    ]
    
    passed_tests = 0
    total_tests = len(test_commands)
    
    for i, cmd in enumerate(test_commands, 1):
        test_name = cmd[-1].split("::")[-1]
        print(f"\n[{i}/{total_tests}] üß™ {test_name}")
        print("-" * 40)
        
        try:
            result = subprocess.run(cmd, check=True, capture_output=True, text=True)
            print("‚úÖ –ü–†–û–ô–î–ï–ù")
            passed_tests += 1
        except subprocess.CalledProcessError as e:
            print("‚ùå –ü–†–û–í–ê–õ–ï–ù")
            print(f"–û—à–∏–±–∫–∞: {e.stderr}")
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 60)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"   ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}/{total_tests}")
    print(f"   ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total_tests - passed_tests}/{total_tests}")
    print(f"   üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(passed_tests/total_tests)*100:.1f}%")
    
    if passed_tests == total_tests:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        return True
    else:
        print(f"\n‚ö†Ô∏è  {total_tests - passed_tests} –¢–ï–°–¢–û–í –ü–†–û–í–ê–õ–ï–ù–û")
        return False

if __name__ == "__main__":
    success = run_tests()
    sys.exit(0 if success else 1)
