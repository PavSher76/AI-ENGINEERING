#!/usr/bin/env python3
"""
–¢–µ—Å—Ç API endpoints –º–æ–¥—É–ª—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è
"""

import asyncio
import httpx
import json
from pathlib import Path

async def test_api_endpoints():
    """–¢–µ—Å—Ç –≤—Å–µ—Ö API endpoints"""
    
    BASE_URL = "http://localhost:8011"
    TEST_TEXT = "–≠—Ç–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫–∞–∞ –≤ —Ç–µ–∫—Å—Ç–µ. –î–æ–∫—É–º–µ–Ω–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–µ–Ω —Å–∏—Å—Ç–µ–º–º–æ–π."
    
    print("üß™ –¢–µ—Å—Ç API endpoints –º–æ–¥—É–ª—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è")
    print("=" * 60)
    
    async with httpx.AsyncClient(timeout=30.0) as client:
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞
        print("1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞...")
        try:
            response = await client.get(f"{BASE_URL}/health")
            if response.status_code == 200:
                health_data = response.json()
                print(f"   ‚úÖ –°–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω: {health_data.get('status', 'unknown')}")
            else:
                print(f"   ‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–∫–æ–¥: {response.status_code})")
                return False
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
        
        # 2. –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏
        print("\n2Ô∏è‚É£ –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏...")
        try:
            response = await client.post(
                f"{BASE_URL}/spell-check",
                json={"text": TEST_TEXT}
            )
            if response.status_code == 200:
                spell_data = response.json()
                errors_found = spell_data.get("errors_found", 0)
                print(f"   ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏: –Ω–∞–π–¥–µ–Ω–æ {errors_found} –æ—à–∏–±–æ–∫")
                print(f"   üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {spell_data.get('confidence_score', 0)}%")
                
                if errors_found > 0:
                    print("   üîç –ü—Ä–∏–º–µ—Ä—ã –æ—à–∏–±–æ–∫:")
                    for i, suggestion in enumerate(spell_data.get("suggestions", [])[:3]):
                        print(f"      {i+1}. '{suggestion.get('word', 'N/A')}' ‚Üí {suggestion.get('suggestions', [])}")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏ (–∫–æ–¥: {response.status_code})")
                print(f"   üìù –û—Ç–≤–µ—Ç: {response.text}")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏: {e}")
        
        # 3. –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∏–ª—è
        print("\n3Ô∏è‚É£ –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∏–ª—è...")
        try:
            response = await client.post(
                f"{BASE_URL}/style-analysis",
                json={
                    "text": TEST_TEXT,
                    "document_type": "business"
                }
            )
            if response.status_code == 200:
                style_data = response.json()
                readability = style_data.get("readability_score", 0)
                business_score = style_data.get("business_style_score", 0)
                print(f"   ‚úÖ –ê–Ω–∞–ª–∏–∑ —Å—Ç–∏–ª—è: —á–∏—Ç–∞–µ–º–æ—Å—Ç—å {readability}, –¥–µ–ª–æ–≤–æ–π —Å—Ç–∏–ª—å {business_score}")
                print(f"   üìä –¢–æ–Ω: {style_data.get('tone_analysis', {}).get('tone', 'unknown')}")
                print(f"   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {style_data.get('recommendations', 'N/A')[:100]}...")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∏–ª—è (–∫–æ–¥: {response.status_code})")
                print(f"   üìù –û—Ç–≤–µ—Ç: {response.text}")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∏–ª—è: {e}")
        
        # 4. –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —ç—Ç–∏–∫–∏
        print("\n4Ô∏è‚É£ –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —ç—Ç–∏–∫–∏...")
        try:
            response = await client.post(
                f"{BASE_URL}/ethics-check",
                json={"text": TEST_TEXT}
            )
            if response.status_code == 200:
                ethics_data = response.json()
                ethics_score = ethics_data.get("ethics_score", 0)
                is_approved = ethics_data.get("is_approved", False)
                print(f"   ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç—Ç–∏–∫–∏: –±–∞–ª–ª {ethics_score}, –æ–¥–æ–±—Ä–µ–Ω: {is_approved}")
                print(f"   üìä –ù–∞—Ä—É—à–µ–Ω–∏–π: {len(ethics_data.get('violations_found', []))}")
                print(f"   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {ethics_data.get('recommendations', 'N/A')[:100]}...")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —ç—Ç–∏–∫–∏ (–∫–æ–¥: {response.status_code})")
                print(f"   üìù –û—Ç–≤–µ—Ç: {response.text}")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —ç—Ç–∏–∫–∏: {e}")
        
        # 5. –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏–∏
        print("\n5Ô∏è‚É£ –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏–∏...")
        try:
            response = await client.post(
                f"{BASE_URL}/terminology-check",
                json={
                    "text": TEST_TEXT,
                    "domain": "engineering"
                }
            )
            if response.status_code == 200:
                term_data = response.json()
                accuracy_score = term_data.get("accuracy_score", 0)
                incorrect_terms = len(term_data.get("incorrect_terms", []))
                print(f"   ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏–∏: —Ç–æ—á–Ω–æ—Å—Ç—å {accuracy_score}%")
                print(f"   üìä –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤: {incorrect_terms}")
                print(f"   üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤: {len(term_data.get('terms_used', []))}")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏–∏ (–∫–æ–¥: {response.status_code})")
                print(f"   üìù –û—Ç–≤–µ—Ç: {response.text}")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏–∏: {e}")
        
        # 6. –¢–µ—Å—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ–±–∑–æ—Ä–∞
        print("\n6Ô∏è‚É£ –¢–µ—Å—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ–±–∑–æ—Ä–∞...")
        try:
            response = await client.post(
                f"{BASE_URL}/final-review",
                json={"text": TEST_TEXT}
            )
            if response.status_code == 200:
                review_data = response.json()
                final_decision = review_data.get("final_decision", "unknown")
                confidence = review_data.get("confidence_score", 0)
                print(f"   ‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π –æ–±–∑–æ—Ä: —Ä–µ—à–µ–Ω–∏–µ '{final_decision}', —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å {confidence}%")
                print(f"   üìä –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: {review_data.get('overall_score', 0)}")
                print(f"   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {review_data.get('recommendations', 'N/A')[:100]}...")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ–±–∑–æ—Ä–∞ (–∫–æ–¥: {response.status_code})")
                print(f"   üìù –û—Ç–≤–µ—Ç: {response.text}")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ–±–∑–æ—Ä–∞: {e}")
        
        # 7. –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        print("\n7Ô∏è‚É£ –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
        try:
            response = await client.get(f"{BASE_URL}/stats")
            if response.status_code == 200:
                stats_data = response.json()
                print(f"   ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞")
                print(f"   üìä –î–∞–Ω–Ω—ã–µ: {stats_data}")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–∫–æ–¥: {response.status_code})")
                print(f"   üìù –û—Ç–≤–µ—Ç: {response.text}")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        
        print("\n" + "=" * 60)
        print("üéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API ENDPOINTS –ó–ê–í–ï–†–®–ï–ù–û!")
        return True

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        success = await test_api_endpoints()
        if success:
            print("\n‚úÖ –í–°–ï –¢–ï–°–¢–´ –í–´–ü–û–õ–ù–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        else:
            print("\n‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´!")
        return success
    except Exception as e:
        print(f"\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        return False

if __name__ == "__main__":
    success = asyncio.run(main())
    exit(0 if success else 1)
