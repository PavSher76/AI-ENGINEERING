#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –º–æ–¥—É–ª—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è
"""

import asyncio
import httpx
import json
from pathlib import Path

async def quick_test():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    
    BASE_URL = "http://localhost:8011"
    TEST_FILE = Path(__file__).parent.parent.parent / "test_data" / "E320.E32C-OUT-03484_–æ—Ç_20.05.2025_—Å_–≥—Ä—É–±—ã–º–∏_–æ—à–∏–±–∫–∞–º–∏.pdf"
    
    print("üß™ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –º–æ–¥—É–ª—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è")
    print("=" * 50)
    
    async with httpx.AsyncClient(timeout=60.0) as client:
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞
        print("1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞...")
        try:
            response = await client.get(f"{BASE_URL}/health")
            if response.status_code == 200:
                print("   ‚úÖ –°–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω")
                health_data = response.json()
                print(f"   üìä –°—Ç–∞—Ç—É—Å: {health_data.get('status', 'unknown')}")
            else:
                print(f"   ‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–∫–æ–¥: {response.status_code})")
                return False
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
        print("\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞...")
        if not TEST_FILE.exists():
            print(f"   ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {TEST_FILE}")
            return False
        print(f"   ‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω: {TEST_FILE.name}")
        print(f"   üìÅ –†–∞–∑–º–µ—Ä: {TEST_FILE.stat().st_size / 1024:.1f} KB")
        
        # 3. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        print("\n3Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
        try:
            with open(TEST_FILE, "rb") as f:
                files = {"file": (TEST_FILE.name, f, "application/pdf")}
                response = await client.post(f"{BASE_URL}/documents/", files=files)
            
            if response.status_code == 200:
                upload_data = response.json()
                document_id = upload_data["document_id"]
                print(f"   ‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω")
                print(f"   üÜî ID: {document_id}")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ (–∫–æ–¥: {response.status_code})")
                print(f"   üìù –û—Ç–≤–µ—Ç: {response.text}")
                return False
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            return False
        
        # 4. –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ (—Ç–æ–ª—å–∫–æ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ—Ç—ã)
        print("\n4Ô∏è‚É£ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏...")
        try:
            response = await client.post(f"{BASE_URL}/documents/{document_id}/process")
            
            if response.status_code == 200:
                analysis_data = response.json()
                print(f"   ‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—É—â–µ–Ω")
                print(f"   üìä –û—Ç–≤–µ—Ç: {analysis_data}")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ (–∫–æ–¥: {response.status_code})")
                print(f"   üìù –û—Ç–≤–µ—Ç: {response.text}")
                return False
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return False
        
        # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print("\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ
            response = await client.get(f"{BASE_URL}/documents/{document_id}")
            if response.status_code == 200:
                document_data = response.json()
                print(f"   ‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ –ø–æ–ª—É—á–µ–Ω–∞")
                print(f"   üìä –î–∞–Ω–Ω—ã–µ: {document_data}")
                results = document_data
            else:
                print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ (–∫–æ–¥: {response.status_code})")
                return False
        except Exception as e:
            print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return False
        
        # 6. –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print("\n6Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω
        if results:
            print(f"   üìä –°—Ç–∞—Ç—É—Å –¥–æ–∫—É–º–µ–Ω—Ç–∞: {results.get('status', 'unknown')}")
            print(f"   üìÅ –ò–º—è —Ñ–∞–π–ª–∞: {results.get('filename', 'unknown')}")
            print(f"   üÜî ID –¥–æ–∫—É–º–µ–Ω—Ç–∞: {results.get('id', 'unknown')}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
            analysis_results = results.get('analysis_results', {})
            if analysis_results:
                print(f"   ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–ª—É—á–µ–Ω—ã")
                print(f"   üìù –î–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞: {analysis_results}")
            else:
                print(f"   ‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            
            print("\n‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
            return True
        else:
            print("\n‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
            return False
    
    return True

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        success = await quick_test()
        if success:
            print("\nüéâ –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
        else:
            print("\n‚ùå –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù!")
        return success
    except Exception as e:
        print(f"\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        return False

if __name__ == "__main__":
    success = asyncio.run(main())
    exit(0 if success else 1)
