#!/bin/bash

echo "üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞"
echo "=============================="

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ª–æ–≥–æ–≤
monitor_logs() {
    echo "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏..."
    echo "   –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞"
    echo ""
    
    # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    docker-compose logs -f frontend 2>/dev/null | while read line; do
        timestamp=$(date '+%Y-%m-%d %H:%M:%S')
        echo "[$timestamp] $line"
    done
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ª–æ–≥–æ–≤
show_recent_logs() {
    echo "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞:"
    echo "============================"
    docker-compose logs --tail=50 frontend
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ª–æ–≥–æ–≤ –ø–æ —Ç–∏–ø—É
filter_logs() {
    local filter_type=$1
    echo "üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ª–æ–≥–æ–≤ –ø–æ —Ç–∏–ø—É: $filter_type"
    echo "=========================================="
    
    case $filter_type in
        "auth")
            docker-compose logs frontend | grep -i "auth\|keycloak\|login\|logout"
            ;;
        "error")
            docker-compose logs frontend | grep -i "error\|failed\|exception"
            ;;
        "navigation")
            docker-compose logs frontend | grep -i "navigation\|route\|page"
            ;;
        "api")
            docker-compose logs frontend | grep -i "api\|request\|response"
            ;;
        *)
            echo "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞: $filter_type"
            echo "   –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã: auth, error, navigation, api"
            ;;
    esac
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≥–æ–≤
analyze_logs() {
    echo "üìä –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞"
    echo "========================"
    
    # –ü–æ–¥—Å—á–µ—Ç –æ—à–∏–±–æ–∫
    error_count=$(docker-compose logs frontend | grep -i "error\|failed\|exception" | wc -l)
    echo "üî¥ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫: $error_count"
    
    # –ü–æ–¥—Å—á–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–π
    auth_success=$(docker-compose logs frontend | grep -i "successful.*auth\|auth.*success" | wc -l)
    echo "‚úÖ –£—Å–ø–µ—à–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: $auth_success"
    
    # –ü–æ–¥—Å—á–µ—Ç –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–π
    auth_failed=$(docker-compose logs frontend | grep -i "auth.*error\|login.*failed" | wc -l)
    echo "‚ùå –ù–µ—É–¥–∞—á–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: $auth_failed"
    
    # –ü–æ–¥—Å—á–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    navigation_count=$(docker-compose logs frontend | grep -i "navigation\|route\|page" | wc -l)
    echo "üß≠ –ü–µ—Ä–µ—Ö–æ–¥—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: $navigation_count"
    
    # –ü–æ–¥—Å—á–µ—Ç API –∑–∞–ø—Ä–æ—Å–æ–≤
    api_count=$(docker-compose logs frontend | grep -i "api\|request\|response" | wc -l)
    echo "üåê API –∑–∞–ø—Ä–æ—Å—ã: $api_count"
    
    echo ""
    echo "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:"
    echo "   –í—Å–µ–≥–æ –ª–æ–≥–æ–≤: $(docker-compose logs frontend | wc -l)"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å
    if [ $((auth_success + auth_failed)) -gt 0 ]; then
        success_rate=$(( auth_success * 100 / (auth_success + auth_failed) ))
        echo "   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${success_rate}%"
    else
        echo "   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: N/A (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –ª–æ–≥–æ–≤
export_logs() {
    local output_file="frontend_logs_$(date +%Y%m%d_%H%M%S).log"
    echo "üì§ –≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª: $output_file"
    echo "====================================="
    
    docker-compose logs frontend > "$output_file"
    echo "‚úÖ –õ–æ–≥–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ñ–∞–π–ª: $output_file"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤
clear_logs() {
    echo "üóëÔ∏è  –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞"
    echo "=========================="
    echo "‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç –≤—Å–µ –ª–æ–≥–∏!"
    read -p "–í—ã —É–≤–µ—Ä–µ–Ω—ã? (y/N): " -n 1 -r
    echo
    
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        docker-compose logs --tail=0 frontend > /dev/null 2>&1
        echo "‚úÖ –õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã"
    else
        echo "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞"
    fi
}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
show_menu() {
    echo ""
    echo "üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞"
    echo "=============================="
    echo "1. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"
    echo "2. –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏"
    echo "3. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ª–æ–≥–æ–≤"
    echo "4. –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤"
    echo "5. –≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤"
    echo "6. –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤"
    echo "7. –í—ã—Ö–æ–¥"
    echo ""
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
main() {
    while true; do
        show_menu
        read -p "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é (1-7): " choice
        
        case $choice in
            1)
                monitor_logs
                ;;
            2)
                show_recent_logs
                ;;
            3)
                echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:"
                echo "  - auth (–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è)"
                echo "  - error (–æ—à–∏–±–∫–∏)"
                echo "  - navigation (–Ω–∞–≤–∏–≥–∞—Ü–∏—è)"
                echo "  - api (API –∑–∞–ø—Ä–æ—Å—ã)"
                read -p "–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: " filter_type
                filter_logs "$filter_type"
                ;;
            4)
                analyze_logs
                ;;
            5)
                export_logs
                ;;
            6)
                clear_logs
                ;;
            7)
                echo "üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!"
                exit 0
                ;;
            *)
                echo "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                ;;
        esac
        
        echo ""
        read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
    done
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
if [ $# -eq 0 ]; then
    main
else
    case $1 in
        "monitor")
            monitor_logs
            ;;
        "recent")
            show_recent_logs
            ;;
        "filter")
            filter_logs "$2"
            ;;
        "analyze")
            analyze_logs
            ;;
        "export")
            export_logs
            ;;
        "clear")
            clear_logs
            ;;
        *)
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [monitor|recent|filter <type>|analyze|export|clear]"
            echo ""
            echo "–ü—Ä–∏–º–µ—Ä—ã:"
            echo "  $0 monitor          # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"
            echo "  $0 recent           # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏"
            echo "  $0 filter auth      # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"
            echo "  $0 analyze          # –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤"
            echo "  $0 export           # –≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤"
            echo "  $0 clear            # –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤"
            ;;
    esac
fi
