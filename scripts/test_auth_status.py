#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏ –∫–∞–∫ –æ–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç
"""

import requests
import json
import logging
import time
from urllib.parse import urljoin

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('auth_status_test.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class AuthStatusTester:
    def __init__(self):
        self.base_url = "https://localhost:9300"
        self.keycloak_url = "https://localhost:9080"
        self.session = requests.Session()
        self.session.verify = False
        self.session.timeout = 10
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ SSL
        import urllib3
        urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
    
    def test_frontend_auth_config(self):
        """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            response = self.session.get(self.base_url)
            
            if response.status_code == 200:
                content = response.text
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                auth_indicators = {
                    "Keycloak Provider": "ReactKeycloakProvider" in content or "keycloak" in content.lower(),
                    "Auth Context": "AuthContext" in content or "useAuth" in content,
                    "Protected Routes": "ProtectedRoute" in content,
                    "Login Component": "Login" in content,
                    "Auth Utils": "keycloakUtils" in content or "authUtils" in content
                }
                
                logger.info("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:")
                for indicator, found in auth_indicators.items():
                    status = "‚úÖ" if found else "‚ùå"
                    logger.info(f"   {status} {indicator}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
                env_indicators = {
                    "Keycloak URL": "KEYCLOAK_URL" in content or "keycloak" in content.lower(),
                    "Realm": "ai-engineering" in content,
                    "Client ID": "ai-frontend" in content
                }
                
                logger.info("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
                for indicator, found in env_indicators.items():
                    status = "‚úÖ" if found else "‚ùå"
                    logger.info(f"   {status} {indicator}")
                
                return auth_indicators, env_indicators
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥: {response.status_code}")
                return None, None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return None, None
    
    def test_protected_routes(self):
        """–¢–µ—Å—Ç –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤...")
        
        protected_routes = [
            "/dashboard",
            "/chat",
            "/consultation",
            "/archive",
            "/calculations",
            "/validation",
            "/documents",
            "/analytics",
            "/integration",
            "/outgoing-control",
            "/qr-validation",
            "/settings"
        ]
        
        results = {}
        
        for route in protected_routes:
            try:
                url = f"{self.base_url}{route}"
                response = self.session.get(url, allow_redirects=False)
                
                results[route] = {
                    "status_code": response.status_code,
                    "redirect": response.headers.get('Location', ''),
                    "content_length": len(response.content)
                }
                
                if response.status_code == 200:
                    logger.info(f"‚úÖ {route} - –¥–æ—Å—Ç—É–ø–µ–Ω –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (200)")
                elif response.status_code in [301, 302, 307, 308]:
                    redirect_url = response.headers.get('Location', '')
                    if 'keycloak' in redirect_url.lower() or 'auth' in redirect_url.lower():
                        logger.info(f"‚úÖ {route} - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é")
                    else:
                        logger.warning(f"‚ö†Ô∏è {route} - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ {redirect_url}")
                else:
                    logger.warning(f"‚ö†Ô∏è {route} - —Å—Ç–∞—Ç—É—Å {response.status_code}")
                    
            except Exception as e:
                logger.error(f"‚ùå {route} - –æ—à–∏–±–∫–∞: {e}")
                results[route] = {"error": str(e)}
        
        return results
    
    def test_keycloak_integration(self):
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Keycloak"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Keycloak...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Keycloak
            realm_url = f"{self.keycloak_url}/realms/ai-engineering"
            response = self.session.get(realm_url)
            
            if response.status_code == 200:
                realm_data = response.json()
                logger.info("‚úÖ Keycloak realm –¥–æ—Å—Ç—É–ø–µ–Ω")
                logger.info(f"   - Realm: {realm_data.get('realm', 'N/A')}")
                logger.info(f"   - Enabled: {realm_data.get('enabled', 'N/A')}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
                client_url = f"{realm_url}/clients"
                client_response = self.session.get(client_url)
                
                if client_response.status_code == 200:
                    clients = client_response.json()
                    ai_frontend_client = None
                    for client in clients:
                        if client.get('clientId') == 'ai-frontend':
                            ai_frontend_client = client
                            break
                    
                    if ai_frontend_client:
                        logger.info("‚úÖ –ö–ª–∏–µ–Ω—Ç 'ai-frontend' –Ω–∞–π–¥–µ–Ω")
                        logger.info(f"   - Enabled: {ai_frontend_client.get('enabled', 'N/A')}")
                        logger.info(f"   - Public Client: {ai_frontend_client.get('publicClient', 'N/A')}")
                        logger.info(f"   - Standard Flow Enabled: {ai_frontend_client.get('standardFlowEnabled', 'N/A')}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º redirect URIs
                        redirect_uris = ai_frontend_client.get('redirectUris', [])
                        logger.info(f"   - Redirect URIs: {redirect_uris}")
                        
                        return True
                    else:
                        logger.error("‚ùå –ö–ª–∏–µ–Ω—Ç 'ai-frontend' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                        return False
                else:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤: {client_response.status_code}")
                    return False
            else:
                logger.error(f"‚ùå Keycloak realm –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
                return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Keycloak: {e}")
            return False
    
    def test_auth_flow(self):
        """–¢–µ—Å—Ç –ø–æ—Ç–æ–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ client credentials flow
            token_url = f"{self.keycloak_url}/realms/ai-engineering/protocol/openid-connect/token"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ endpoint –¥–æ—Å—Ç—É–ø–µ–Ω
            response = self.session.get(token_url)
            if response.status_code == 405:  # Method Not Allowed - –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è GET –∑–∞–ø—Ä–æ—Å–∞ –∫ token endpoint
                logger.info("‚úÖ Token endpoint –¥–æ—Å—Ç—É–ø–µ–Ω")
            else:
                logger.warning(f"‚ö†Ô∏è Token endpoint –æ—Ç–≤–µ—á–∞–µ—Ç —Å –∫–æ–¥–æ–º {response.status_code}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º authorization endpoint
            auth_url = f"{self.keycloak_url}/realms/ai-engineering/protocol/openid-connect/auth"
            auth_response = self.session.get(auth_url)
            
            if auth_response.status_code in [200, 400]:  # 400 –Ω–æ—Ä–º–∞–ª—å–Ω–æ –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                logger.info("‚úÖ Authorization endpoint –¥–æ—Å—Ç—É–ø–µ–Ω")
            else:
                logger.warning(f"‚ö†Ô∏è Authorization endpoint –æ—Ç–≤–µ—á–∞–µ—Ç —Å –∫–æ–¥–æ–º {auth_response.status_code}")
            
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Ç–æ–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
        auth_config, env_config = self.test_frontend_auth_config()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
        protected_results = self.test_protected_routes()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Keycloak
        keycloak_ok = self.test_keycloak_integration()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ—Ç–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        auth_flow_ok = self.test_auth_flow()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        self.generate_report(auth_config, env_config, protected_results, keycloak_ok, auth_flow_ok)
    
    def generate_report(self, auth_config, env_config, protected_results, keycloak_ok, auth_flow_ok):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞"""
        logger.info("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Å—Ç–∞—Ç—É—Å–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
        
        report = {
            "timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
            "test_type": "auth_status_test",
            "frontend_auth_config": auth_config,
            "environment_config": env_config,
            "protected_routes": protected_results,
            "keycloak_integration": keycloak_ok,
            "auth_flow": auth_flow_ok,
            "recommendations": self.get_recommendations(auth_config, env_config, protected_results, keycloak_ok)
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        with open("auth_status_test_report.json", "w", encoding="utf-8") as f:
            json.dump(report, f, ensure_ascii=False, indent=2)
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        logger.info("=" * 60)
        logger.info("üìã –û–¢–ß–ï–¢ –û –°–¢–ê–¢–£–°–ï –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò –§–†–û–ù–¢–ï–ù–î–ê")
        logger.info("=" * 60)
        
        if auth_config:
            auth_enabled = sum(auth_config.values()) >= len(auth_config) * 0.6
            logger.info(f"üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞: {'‚úÖ –í–ö–õ–Æ–ß–ï–ù–ê' if auth_enabled else '‚ùå –û–¢–ö–õ–Æ–ß–ï–ù–ê'}")
        
        if env_config:
            env_ok = sum(env_config.values()) >= len(env_config) * 0.6
            logger.info(f"‚öôÔ∏è –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {'‚úÖ –ù–ê–°–¢–†–û–ï–ù–´' if env_ok else '‚ùå –ù–ï –ù–ê–°–¢–†–û–ï–ù–´'}")
        
        logger.info(f"üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Keycloak: {'‚úÖ –†–ê–ë–û–¢–ê–ï–¢' if keycloak_ok else '‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢'}")
        logger.info(f"üîÑ –ü–æ—Ç–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {'‚úÖ –î–û–°–¢–£–ü–ï–ù' if auth_flow_ok else '‚ùå –ù–ï –î–û–°–¢–£–ü–ï–ù'}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
        if protected_results:
            accessible_routes = sum(1 for r in protected_results.values() if r.get('status_code') == 200)
            total_routes = len(protected_results)
            logger.info(f"üõ°Ô∏è –ó–∞—â–∏—â–µ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã: {accessible_routes}/{total_routes} –¥–æ—Å—Ç—É–ø–Ω—ã –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        
        recommendations = self.get_recommendations(auth_config, env_config, protected_results, keycloak_ok)
        if recommendations:
            logger.info("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            for rec in recommendations:
                logger.info(f"  - {rec}")
        
        logger.info(f"\nüìÑ –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: auth_status_test_report.json")
        logger.info("=" * 60)
    
    def get_recommendations(self, auth_config, env_config, protected_results, keycloak_ok):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
        recommendations = []
        
        if auth_config and sum(auth_config.values()) < len(auth_config) * 0.6:
            recommendations.append("–í–∫–ª—é—á–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –≤ –∫–æ–¥–µ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞")
            recommendations.append("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–º–ø–æ—Ä—Ç—ã ReactKeycloakProvider –∏ AuthContext")
        
        if env_config and sum(env_config.values()) < len(env_config) * 0.6:
            recommendations.append("–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Keycloak")
            recommendations.append("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ REACT_APP_KEYCLOAK_URL, REACT_APP_KEYCLOAK_REALM, REACT_APP_KEYCLOAK_CLIENT_ID —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        
        if not keycloak_ok:
            recommendations.append("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Keycloak")
            recommendations.append("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ realm 'ai-engineering' –∏ –∫–ª–∏–µ–Ω—Ç 'ai-frontend' —Å–æ–∑–¥–∞–Ω—ã")
        
        if protected_results:
            accessible_routes = sum(1 for r in protected_results.values() if r.get('status_code') == 200)
            if accessible_routes > len(protected_results) * 0.5:
                recommendations.append("–ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ ProtectedRoute –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã")
        
        if not recommendations:
            recommendations.append("–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        
        return recommendations

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = AuthStatusTester()
    tester.run_all_tests()

if __name__ == "__main__":
    main()
