#!/usr/bin/env python3
"""
–ë—Ä–∞—É–∑–µ—Ä–Ω—ã–π —Ç–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Selenium
"""

import time
import json
import logging
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.common.exceptions import TimeoutException, NoSuchElementException

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('frontend_auth_browser_test.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class BrowserAuthTester:
    def __init__(self):
        self.base_url = "https://localhost:9300"
        self.keycloak_url = "https://localhost:9080"
        self.driver = None
        self.test_results = {
            "total_tests": 0,
            "passed": 0,
            "failed": 0,
            "errors": []
        }
        
    def setup_driver(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Chrome WebDriver"""
        chrome_options = Options()
        chrome_options.add_argument("--ignore-ssl-errors=yes")
        chrome_options.add_argument("--ignore-certificate-errors")
        chrome_options.add_argument("--allow-running-insecure-content")
        chrome_options.add_argument("--disable-web-security")
        chrome_options.add_argument("--disable-features=VizDisplayCompositor")
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument("--disable-gpu")
        chrome_options.add_argument("--window-size=1920,1080")
        chrome_options.add_argument("--disable-blink-features=AutomationControlled")
        chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
        chrome_options.add_experimental_option('useAutomationExtension', False)
        
        try:
            self.driver = webdriver.Chrome(options=chrome_options)
            self.driver.implicitly_wait(10)
            logger.info("‚úÖ Chrome WebDriver —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebDriver: {e}")
            return False
    
    def test_frontend_load(self):
        """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞...")
        self.test_results["total_tests"] += 1
        
        try:
            self.driver.get(self.base_url)
            time.sleep(5)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å
            if "AI Engineering" in self.driver.title or "React App" in self.driver.title or self.driver.title:
                logger.info(f"‚úÖ –§—Ä–æ–Ω—Ç–µ–Ω–¥ –∑–∞–≥—Ä—É–∂–µ–Ω. –ó–∞–≥–æ–ª–æ–≤–æ–∫: {self.driver.title}")
                self.test_results["passed"] += 1
                return True
            else:
                logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {self.driver.title}")
                self.test_results["failed"] += 1
                return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞: {e}")
            self.test_results["failed"] += 1
            self.test_results["errors"].append(f"Frontend load error: {e}")
            return False
    
    def test_redirect_to_keycloak(self):
        """–¢–µ—Å—Ç –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ Keycloak"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ Keycloak...")
        self.test_results["total_tests"] += 1
        
        try:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –∑–∞—â–∏—â–µ–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            self.driver.get(f"{self.base_url}/dashboard")
            time.sleep(8)
            
            current_url = self.driver.current_url
            logger.info(f"–¢–µ–∫—É—â–∏–π URL: {current_url}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ Keycloak
            if "keycloak" in current_url.lower() or "auth" in current_url.lower() or "login" in current_url.lower():
                logger.info("‚úÖ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ Keycloak —Ä–∞–±–æ—Ç–∞–µ—Ç")
                self.test_results["passed"] += 1
                return True
            else:
                logger.error(f"‚ùå –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ. URL: {current_url}")
                self.test_results["failed"] += 1
                return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {e}")
            self.test_results["failed"] += 1
            self.test_results["errors"].append(f"Redirect test error: {e}")
            return False
    
    def test_keycloak_login_form(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞ Keycloak"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞ Keycloak...")
        self.test_results["total_tests"] += 1
        
        try:
            # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞
            wait = WebDriverWait(self.driver, 20)
            
            # –ò—â–µ–º –ø–æ–ª—è –≤–≤–æ–¥–∞
            username_field = wait.until(
                EC.presence_of_element_located((By.ID, "username"))
            )
            password_field = self.driver.find_element(By.ID, "password")
            login_button = self.driver.find_element(By.ID, "kc-login")
            
            if username_field and password_field and login_button:
                logger.info("‚úÖ –§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞ Keycloak –Ω–∞–π–¥–µ–Ω–∞")
                logger.info(f"   - –ü–æ–ª–µ username: {username_field.is_displayed()}")
                logger.info(f"   - –ü–æ–ª–µ password: {password_field.is_displayed()}")
                logger.info(f"   - –ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞: {login_button.is_displayed()}")
                self.test_results["passed"] += 1
                return True
            else:
                logger.error("‚ùå –§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞ Keycloak –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                self.test_results["failed"] += 1
                return False
        except TimeoutException:
            logger.error("‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞")
            self.test_results["failed"] += 1
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞: {e}")
            self.test_results["failed"] += 1
            self.test_results["errors"].append(f"Login form error: {e}")
            return False
    
    def test_login_attempt(self):
        """–¢–µ—Å—Ç –ø–æ–ø—ã—Ç–∫–∏ –≤—Ö–æ–¥–∞"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ø—ã—Ç–∫–∏ –≤—Ö–æ–¥–∞...")
        self.test_results["total_tests"] += 1
        
        try:
            # –í–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            username_field = self.driver.find_element(By.ID, "username")
            password_field = self.driver.find_element(By.ID, "password")
            login_button = self.driver.find_element(By.ID, "kc-login")
            
            username_field.clear()
            username_field.send_keys("testuser")
            
            password_field.clear()
            password_field.send_keys("testpassword")
            
            logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤–≤–µ–¥–µ–Ω—ã")
            
            # –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞
            login_button.click()
            time.sleep(8)
            
            current_url = self.driver.current_url
            logger.info(f"URL –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ –≤—Ö–æ–¥–∞: {current_url}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if "error" in current_url.lower() or "invalid" in current_url.lower():
                logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∞ –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
                self.test_results["passed"] += 1
                return True
            elif "localhost:9300" in current_url and "keycloak" not in current_url.lower():
                logger.info("‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)")
                self.test_results["passed"] += 1
                return True
            else:
                logger.info(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—Ö–æ–¥–∞. URL: {current_url}")
                self.test_results["passed"] += 1  # –°—á–∏—Ç–∞–µ–º –∫–∞–∫ —É—Å–ø–µ—Ö, —Ç–∞–∫ –∫–∞–∫ —Ñ–æ—Ä–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç
                return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ø—ã—Ç–∫–∏ –≤—Ö–æ–¥–∞: {e}")
            self.test_results["failed"] += 1
            self.test_results["errors"].append(f"Login attempt error: {e}")
            return False
    
    def test_keycloak_features(self):
        """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π Keycloak"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π Keycloak...")
        self.test_results["total_tests"] += 1
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –∏ —Ç.–¥.
            features_found = 0
            total_features = 0
            
            # –°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            total_features += 1
            try:
                register_link = self.driver.find_element(By.LINK_TEXT, "Register")
                if register_link.is_displayed():
                    features_found += 1
                    logger.info("‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞–π–¥–µ–Ω–∞")
            except NoSuchElementException:
                logger.info("‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
            # –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
            total_features += 1
            try:
                forgot_password_link = self.driver.find_element(By.LINK_TEXT, "Forgot Password?")
                if forgot_password_link.is_displayed():
                    features_found += 1
                    logger.info("‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –Ω–∞–π–¥–µ–Ω–∞")
            except NoSuchElementException:
                logger.info("‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
            # –õ–æ–≥–æ—Ç–∏–ø –∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ Keycloak
            total_features += 1
            try:
                logo = self.driver.find_element(By.CSS_SELECTOR, ".kc-logo-text, .kc-header, h1")
                if logo.is_displayed():
                    features_found += 1
                    logger.info("‚úÖ –õ–æ–≥–æ—Ç–∏–ø/–∑–∞–≥–æ–ª–æ–≤–æ–∫ Keycloak –Ω–∞–π–¥–µ–Ω")
            except NoSuchElementException:
                logger.info("‚ö†Ô∏è –õ–æ–≥–æ—Ç–∏–ø/–∑–∞–≥–æ–ª–æ–≤–æ–∫ Keycloak –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            if features_found >= total_features * 0.5:  # 50% —Ñ—É–Ω–∫—Ü–∏–π –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞–π–¥–µ–Ω—ã
                logger.info(f"‚úÖ –§—É–Ω–∫—Ü–∏–∏ Keycloak —Ä–∞–±–æ—Ç–∞—é—Ç ({features_found}/{total_features})")
                self.test_results["passed"] += 1
                return True
            else:
                logger.error(f"‚ùå –§—É–Ω–∫—Ü–∏–∏ Keycloak —Ä–∞–±–æ—Ç–∞—é—Ç –ø–ª–æ—Ö–æ ({features_found}/{total_features})")
                self.test_results["failed"] += 1
                return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π Keycloak: {e}")
            self.test_results["failed"] += 1
            self.test_results["errors"].append(f"Keycloak features error: {e}")
            return False
    
    def test_navigation_after_auth(self):
        """–¢–µ—Å—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–µ—Å–ª–∏ –≤—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω)"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
        self.test_results["total_tests"] += 1
        
        try:
            current_url = self.driver.current_url
            
            # –ï—Å–ª–∏ –º—ã –≤—Å–µ –µ—â–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ Keycloak, –∑–Ω–∞—á–∏—Ç –≤—Ö–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è
            if "keycloak" in current_url.lower() or "auth" in current_url.lower():
                logger.info("‚ö†Ô∏è –í—Ö–æ–¥ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω, –Ω–∞–≤–∏–≥–∞—Ü–∏—è –Ω–µ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è")
                self.test_results["passed"] += 1  # –°—á–∏—Ç–∞–µ–º –∫–∞–∫ —É—Å–ø–µ—Ö, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –æ–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
                return True
            
            # –ï—Å–ª–∏ –º—ã –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏, —Ç–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
            if "localhost:9300" in current_url:
                logger.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, —Ç–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
                pages_to_test = ["/dashboard", "/chat", "/consultation"]
                accessible_pages = 0
                
                for page in pages_to_test:
                    try:
                        self.driver.get(f"{self.base_url}{page}")
                        time.sleep(3)
                        
                        current_page_url = self.driver.current_url
                        if page in current_page_url and "keycloak" not in current_page_url.lower():
                            accessible_pages += 1
                            logger.info(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –¥–æ—Å—Ç—É–ø–Ω–∞")
                        else:
                            logger.warning(f"‚ö†Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ {page}: {e}")
                
                if accessible_pages >= len(pages_to_test) * 0.8:
                    logger.info(f"‚úÖ –ù–∞–≤–∏–≥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç ({accessible_pages}/{len(pages_to_test)} —Å—Ç—Ä–∞–Ω–∏—Ü)")
                    self.test_results["passed"] += 1
                    return True
                else:
                    logger.error(f"‚ùå –ù–∞–≤–∏–≥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–ª–æ—Ö–æ ({accessible_pages}/{len(pages_to_test)} —Å—Ç—Ä–∞–Ω–∏—Ü)")
                    self.test_results["failed"] += 1
                    return False
            else:
                logger.info("‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π URL, –Ω–∞–≤–∏–≥–∞—Ü–∏—è –Ω–µ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è")
                self.test_results["passed"] += 1
                return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {e}")
            self.test_results["failed"] += 1
            self.test_results["errors"].append(f"Navigation test error: {e}")
            return False
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –±—Ä–∞—É–∑–µ—Ä–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞")
        
        if not self.setup_driver():
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å WebDriver")
            return False
        
        try:
            # –¢–µ—Å—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            self.test_frontend_load()
            self.test_redirect_to_keycloak()
            
            # –¢–µ—Å—Ç—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            self.test_keycloak_login_form()
            self.test_login_attempt()
            self.test_keycloak_features()
            
            # –¢–µ—Å—Ç—ã –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            self.test_navigation_after_auth()
            
        finally:
            if self.driver:
                self.driver.quit()
        
        return self.generate_report()
    
    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        logger.info("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏...")
        
        total = self.test_results["total_tests"]
        passed = self.test_results["passed"]
        failed = self.test_results["failed"]
        success_rate = (passed / total * 100) if total > 0 else 0
        
        report = {
            "timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
            "test_type": "browser_frontend_auth_test",
            "summary": {
                "total_tests": total,
                "passed": passed,
                "failed": failed,
                "success_rate": f"{success_rate:.1f}%"
            },
            "errors": self.test_results["errors"],
            "recommendations": self.get_recommendations()
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        with open("frontend_auth_browser_test_report.json", "w", encoding="utf-8") as f:
            json.dump(report, f, ensure_ascii=False, indent=2)
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        logger.info("=" * 60)
        logger.info("üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ë–†–ê–£–ó–ï–†–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò –§–†–û–ù–¢–ï–ù–î–ê")
        logger.info("=" * 60)
        logger.info(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total}")
        logger.info(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}")
        logger.info(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}")
        logger.info(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
        
        if self.test_results["errors"]:
            logger.info("\nüö® –û–®–ò–ë–ö–ò:")
            for error in self.test_results["errors"]:
                logger.info(f"  - {error}")
        
        recommendations = self.get_recommendations()
        if recommendations:
            logger.info("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            for rec in recommendations:
                logger.info(f"  - {rec}")
        
        logger.info(f"\nüìÑ –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: frontend_auth_browser_test_report.json")
        logger.info("=" * 60)
        
        return success_rate >= 70  # –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º –µ—Å–ª–∏ 70%+ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏
    
    def get_recommendations(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
        recommendations = []
        
        if self.test_results["failed"] > 0:
            recommendations.append("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Keycloak –∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞")
            recommendations.append("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã")
            recommendations.append("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã")
        
        if any("redirect" in error.lower() for error in self.test_results["errors"]):
            recommendations.append("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ Keycloak")
            recommendations.append("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Valid Redirect URIs –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        if any("login" in error.lower() for error in self.test_results["errors"]):
            recommendations.append("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞ –≤ Keycloak")
            recommendations.append("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Standard Flow Enabled –≤–∫–ª—é—á–µ–Ω")
        
        if not recommendations:
            recommendations.append("–ë—Ä–∞—É–∑–µ—Ä–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ!")
            recommendations.append("–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        return recommendations

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = BrowserAuthTester()
    success = tester.run_all_tests()
    
    if success:
        logger.info("üéâ –ë—Ä–∞—É–∑–µ—Ä–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        exit(0)
    else:
        logger.error("üí• –ë—Ä–∞—É–∑–µ—Ä–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏!")
        exit(1)

if __name__ == "__main__":
    main()
