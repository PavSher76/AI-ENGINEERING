#!/usr/bin/env python3
"""
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ AI Engineering –ø—Ä–æ–µ–∫—Ç–∞
"""

import os
import sys
import json
import time
import argparse
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List, Any
import re
from collections import defaultdict, Counter


class LogMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∞–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤"""
    
    def __init__(self, log_dir: str = "/app/logs"):
        self.log_dir = Path(log_dir)
        self.services = [
            "chat-service",
            "qr-validation-service", 
            "techexpert-connector",
            "rag-service",
            "ollama-service",
            "outgoing-control-service"
        ]
        
    def get_log_files(self, service: str) -> List[Path]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª—ã –ª–æ–≥–æ–≤ –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞"""
        log_files = []
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥
        main_log = self.log_dir / f"{service}.log"
        if main_log.exists():
            log_files.append(main_log)
            
        # –õ–æ–≥ –æ—à–∏–±–æ–∫
        error_log = self.log_dir / f"{service}_errors.log"
        if error_log.exists():
            log_files.append(error_log)
            
        # –†–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–æ–≥–∏
        for i in range(1, 10):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ 9 —Ä–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            rotated_log = self.log_dir / f"{service}.log.{i}"
            if rotated_log.exists():
                log_files.append(rotated_log)
                
        return log_files
    
    def parse_log_entry(self, line: str) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON (—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–æ–≥–∏)
            if line.strip().startswith('{'):
                return json.loads(line.strip())
        except json.JSONDecodeError:
            pass
            
        # –ü–∞—Ä—Å–∏–Ω–≥ –æ–±—ã—á–Ω—ã—Ö –ª–æ–≥–æ–≤
        # –§–æ—Ä–º–∞—Ç: 2024-01-01 12:00:00 - service - INFO - message
        pattern = r'(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}) - (\w+) - (\w+) - (.+)'
        match = re.match(pattern, line.strip())
        
        if match:
            timestamp_str, service, level, message = match.groups()
            timestamp = datetime.strptime(timestamp_str, '%Y-%m-%d %H:%M:%S')
            
            return {
                "timestamp": timestamp.isoformat(),
                "service": service,
                "level": level,
                "message": message,
                "raw": line.strip()
            }
        
        return {
            "timestamp": datetime.now().isoformat(),
            "service": "unknown",
            "level": "INFO",
            "message": line.strip(),
            "raw": line.strip()
        }
    
    def analyze_logs(self, service: str, hours: int = 24) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ —Å–µ—Ä–≤–∏—Å–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —á–∞—Å–æ–≤"""
        log_files = self.get_log_files(service)
        if not log_files:
            return {"error": f"–õ–æ–≥–∏ –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ {service} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"}
        
        cutoff_time = datetime.now() - timedelta(hours=hours)
        entries = []
        
        # –ß–∏—Ç–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –ª–æ–≥–æ–≤
        for log_file in log_files:
            try:
                with open(log_file, 'r', encoding='utf-8') as f:
                    for line in f:
                        entry = self.parse_log_entry(line)
                        if 'timestamp' in entry:
                            try:
                                entry_time = datetime.fromisoformat(entry['timestamp'].replace('Z', '+00:00'))
                                if entry_time >= cutoff_time:
                                    entries.append(entry)
                            except:
                                # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø–∞—Ä—Å–∏—Ç—å –≤—Ä–µ–º—è, –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
                                entries.append(entry)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {log_file}: {e}")
        
        # –ê–Ω–∞–ª–∏–∑
        analysis = {
            "service": service,
            "period_hours": hours,
            "total_entries": len(entries),
            "levels": Counter(entry.get('level', 'UNKNOWN') for entry in entries),
            "errors": [],
            "warnings": [],
            "performance_metrics": [],
            "business_events": [],
            "recent_activity": []
        }
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏
        for entry in entries:
            level = entry.get('level', '').upper()
            message = entry.get('message', '')
            
            # –û—à–∏–±–∫–∏
            if level == 'ERROR':
                analysis['errors'].append({
                    "timestamp": entry.get('timestamp'),
                    "message": message,
                    "raw": entry.get('raw', '')
                })
            
            # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            elif level == 'WARNING':
                analysis['warnings'].append({
                    "timestamp": entry.get('timestamp'),
                    "message": message
                })
            
            # –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            if 'duration' in entry or '–∑–∞' in message and 's' in message:
                analysis['performance_metrics'].append(entry)
            
            # –ë–∏–∑–Ω–µ—Å-—Å–æ–±—ã—Ç–∏—è
            if '–ë–∏–∑–Ω–µ—Å-—Å–æ–±—ã—Ç–∏–µ' in message or 'event' in entry:
                analysis['business_events'].append(entry)
        
        # –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π)
        analysis['recent_activity'] = entries[-10:] if entries else []
        
        return analysis
    
    def get_service_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        status = {}
        
        for service in self.services:
            log_files = self.get_log_files(service)
            if not log_files:
                status[service] = {"status": "no_logs", "message": "–õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"}
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            latest_activity = None
            for log_file in log_files:
                try:
                    with open(log_file, 'r', encoding='utf-8') as f:
                        lines = f.readlines()
                        if lines:
                            last_line = lines[-1].strip()
                            entry = self.parse_log_entry(last_line)
                            if 'timestamp' in entry:
                                try:
                                    entry_time = datetime.fromisoformat(entry['timestamp'].replace('Z', '+00:00'))
                                    if latest_activity is None or entry_time > latest_activity:
                                        latest_activity = entry_time
                                except:
                                    pass
                except:
                    continue
            
            if latest_activity:
                time_diff = datetime.now() - latest_activity
                if time_diff < timedelta(minutes=5):
                    status[service] = {"status": "active", "last_activity": latest_activity.isoformat()}
                elif time_diff < timedelta(hours=1):
                    status[service] = {"status": "idle", "last_activity": latest_activity.isoformat()}
                else:
                    status[service] = {"status": "inactive", "last_activity": latest_activity.isoformat()}
            else:
                status[service] = {"status": "no_activity", "message": "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"}
        
        return status
    
    def generate_report(self, hours: int = 24) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –ª–æ–≥–∞–º"""
        report = []
        report.append("=" * 80)
        report.append(f"–û–¢–ß–ï–¢ –ü–û –õ–û–ì–ê–ú AI ENGINEERING –ü–†–û–ï–ö–¢–ê")
        report.append(f"–ü–µ—Ä–∏–æ–¥: –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours} —á–∞—Å–æ–≤")
        report.append(f"–í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        report.append("=" * 80)
        report.append("")
        
        # –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤
        report.append("üìä –°–¢–ê–¢–£–° –°–ï–†–í–ò–°–û–í:")
        status = self.get_service_status()
        for service, service_status in status.items():
            status_emoji = {
                "active": "üü¢",
                "idle": "üü°", 
                "inactive": "üî¥",
                "no_logs": "‚ö™",
                "no_activity": "‚ö´"
            }.get(service_status["status"], "‚ùì")
            
            report.append(f"  {status_emoji} {service}: {service_status['status']}")
            if 'last_activity' in service_status:
                report.append(f"    –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {service_status['last_activity']}")
        report.append("")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
        for service in self.services:
            analysis = self.analyze_logs(service, hours)
            if "error" in analysis:
                continue
                
            report.append(f"üîç –ê–ù–ê–õ–ò–ó –°–ï–†–í–ò–°–ê: {service.upper()}")
            report.append(f"  –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {analysis['total_entries']}")
            
            # –£—Ä–æ–≤–Ω–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            if analysis['levels']:
                report.append("  –£—Ä–æ–≤–Ω–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:")
                for level, count in analysis['levels'].most_common():
                    report.append(f"    {level}: {count}")
            
            # –û—à–∏–±–∫–∏
            if analysis['errors']:
                report.append(f"  ‚ùå –û—à–∏–±–∫–∏ ({len(analysis['errors'])}):")
                for error in analysis['errors'][-5:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –æ—à–∏–±–æ–∫
                    report.append(f"    {error['timestamp']}: {error['message'][:100]}...")
            
            # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            if analysis['warnings']:
                report.append(f"  ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è ({len(analysis['warnings'])}):")
                for warning in analysis['warnings'][-3:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
                    report.append(f"    {warning['timestamp']}: {warning['message'][:100]}...")
            
            # –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            if analysis['performance_metrics']:
                report.append(f"  ‚ö° –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {len(analysis['performance_metrics'])} –∑–∞–ø–∏—Å–µ–π")
            
            # –ë–∏–∑–Ω–µ—Å-—Å–æ–±—ã—Ç–∏—è
            if analysis['business_events']:
                report.append(f"  üìä –ë–∏–∑–Ω–µ—Å-—Å–æ–±—ã—Ç–∏—è: {len(analysis['business_events'])} –∑–∞–ø–∏—Å–µ–π")
            
            report.append("")
        
        return "\n".join(report)
    
    def watch_logs(self, service: str, follow: bool = True):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        log_files = self.get_log_files(service)
        if not log_files:
            print(f"–õ–æ–≥–∏ –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ {service} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        print(f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ —Å–µ—Ä–≤–∏—Å–∞ {service}...")
        print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞")
        print("-" * 80)
        
        try:
            while follow:
                for log_file in log_files:
                    try:
                        with open(log_file, 'r', encoding='utf-8') as f:
                            f.seek(0, 2)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
                            while True:
                                line = f.readline()
                                if line:
                                    entry = self.parse_log_entry(line)
                                    timestamp = entry.get('timestamp', '')
                                    level = entry.get('level', 'INFO')
                                    message = entry.get('message', '')
                                    
                                    # –¶–≤–µ—Ç–æ–≤–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π
                                    colors = {
                                        'ERROR': '\033[91m',    # –ö—Ä–∞—Å–Ω—ã–π
                                        'WARNING': '\033[93m',  # –ñ–µ–ª—Ç—ã–π
                                        'INFO': '\033[92m',     # –ó–µ–ª–µ–Ω—ã–π
                                        'DEBUG': '\033[94m',    # –°–∏–Ω–∏–π
                                    }
                                    reset = '\033[0m'
                                    
                                    color = colors.get(level, '')
                                    print(f"{color}[{timestamp}] {level}: {message}{reset}")
                                else:
                                    time.sleep(0.1)
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {log_file}: {e}")
                        time.sleep(1)
        except KeyboardInterrupt:
            print("\n–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


def main():
    parser = argparse.ArgumentParser(description="–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ AI Engineering –ø—Ä–æ–µ–∫—Ç–∞")
    parser.add_argument("--log-dir", default="/app/logs", help="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –ª–æ–≥–∞–º–∏")
    parser.add_argument("--service", help="–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞")
    parser.add_argument("--hours", type=int, default=24, help="–ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ –≤ —á–∞—Å–∞—Ö")
    parser.add_argument("--watch", action="store_true", help="–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
    parser.add_argument("--report", action="store_true", help="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞")
    parser.add_argument("--status", action="store_true", help="–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤")
    
    args = parser.parse_args()
    
    monitor = LogMonitor(args.log_dir)
    
    if args.watch and args.service:
        monitor.watch_logs(args.service)
    elif args.report:
        print(monitor.generate_report(args.hours))
    elif args.status:
        status = monitor.get_service_status()
        print(json.dumps(status, indent=2, ensure_ascii=False))
    elif args.service:
        analysis = monitor.analyze_logs(args.service, args.hours)
        print(json.dumps(analysis, indent=2, ensure_ascii=False))
    else:
        print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø—Ü–∏–π")


if __name__ == "__main__":
    main()
