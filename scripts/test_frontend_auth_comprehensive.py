#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä
"""

import time
import json
import requests
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.common.exceptions import TimeoutException, NoSuchElementException
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('frontend_auth_test.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class FrontendAuthTester:
    def __init__(self):
        self.base_url = "https://localhost:9300"
        self.keycloak_url = "https://localhost:9080"
        self.driver = None
        self.test_results = {
            "total_tests": 0,
            "passed": 0,
            "failed": 0,
            "errors": []
        }
        
    def setup_driver(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Chrome WebDriver"""
        chrome_options = Options()
        chrome_options.add_argument("--ignore-ssl-errors=yes")
        chrome_options.add_argument("--ignore-certificate-errors")
        chrome_options.add_argument("--allow-running-insecure-content")
        chrome_options.add_argument("--disable-web-security")
        chrome_options.add_argument("--disable-features=VizDisplayCompositor")
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument("--disable-gpu")
        chrome_options.add_argument("--window-size=1920,1080")
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ–º –∫–æ–Ω—Ç–µ–Ω—Ç–µ
        chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
        chrome_options.add_experimental_option('useAutomationExtension', False)
        
        try:
            self.driver = webdriver.Chrome(options=chrome_options)
            self.driver.implicitly_wait(10)
            logger.info("Chrome WebDriver —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebDriver: {e}")
            return False
    
    def test_keycloak_availability(self):
        """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Keycloak"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Keycloak...")
        self.test_results["total_tests"] += 1
        
        try:
            response = requests.get(
                f"{self.keycloak_url}/realms/ai-engineering",
                verify=False,
                timeout=10
            )
            if response.status_code == 200:
                logger.info("‚úÖ Keycloak –¥–æ—Å—Ç—É–ø–µ–Ω")
                self.test_results["passed"] += 1
                return True
            else:
                logger.error(f"‚ùå Keycloak –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
                self.test_results["failed"] += 1
                return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Keycloak: {e}")
            self.test_results["failed"] += 1
            self.test_results["errors"].append(f"Keycloak connection error: {e}")
            return False
    
    def test_frontend_availability(self):
        """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞...")
        self.test_results["total_tests"] += 1
        
        try:
            response = requests.get(
                self.base_url,
                verify=False,
                timeout=10
            )
            if response.status_code == 200:
                logger.info("‚úÖ –§—Ä–æ–Ω—Ç–µ–Ω–¥ –¥–æ—Å—Ç—É–ø–µ–Ω")
                self.test_results["passed"] += 1
                return True
            else:
                logger.error(f"‚ùå –§—Ä–æ–Ω—Ç–µ–Ω–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
                self.test_results["failed"] += 1
                return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É: {e}")
            self.test_results["failed"] += 1
            self.test_results["errors"].append(f"Frontend connection error: {e}")
            return False
    
    def test_initial_page_load(self):
        """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—á–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—á–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
        self.test_results["total_tests"] += 1
        
        try:
            self.driver.get(self.base_url)
            time.sleep(3)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å
            if "AI Engineering" in self.driver.title or "React App" in self.driver.title:
                logger.info("‚úÖ –ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                self.test_results["passed"] += 1
                return True
            else:
                logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {self.driver.title}")
                self.test_results["failed"] += 1
                return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
            self.test_results["failed"] += 1
            self.test_results["errors"].append(f"Page load error: {e}")
            return False
    
    def test_redirect_to_login(self):
        """–¢–µ—Å—Ç –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞...")
        self.test_results["total_tests"] += 1
        
        try:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –∑–∞—â–∏—â–µ–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            self.driver.get(f"{self.base_url}/dashboard")
            time.sleep(5)
            
            current_url = self.driver.current_url
            logger.info(f"–¢–µ–∫—É—â–∏–π URL: {current_url}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ Keycloak –∏–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
            if "keycloak" in current_url.lower() or "login" in current_url.lower() or "auth" in current_url.lower():
                logger.info("‚úÖ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Ä–∞–±–æ—Ç–∞–µ—Ç")
                self.test_results["passed"] += 1
                return True
            else:
                logger.error(f"‚ùå –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ. URL: {current_url}")
                self.test_results["failed"] += 1
                return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {e}")
            self.test_results["failed"] += 1
            self.test_results["errors"].append(f"Redirect test error: {e}")
            return False
    
    def test_keycloak_login_form(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞ Keycloak"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞ Keycloak...")
        self.test_results["total_tests"] += 1
        
        try:
            # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞
            wait = WebDriverWait(self.driver, 15)
            
            # –ò—â–µ–º –ø–æ–ª—è –≤–≤–æ–¥–∞
            username_field = wait.until(
                EC.presence_of_element_located((By.ID, "username"))
            )
            password_field = self.driver.find_element(By.ID, "password")
            login_button = self.driver.find_element(By.ID, "kc-login")
            
            if username_field and password_field and login_button:
                logger.info("‚úÖ –§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞ Keycloak –Ω–∞–π–¥–µ–Ω–∞")
                self.test_results["passed"] += 1
                return True
            else:
                logger.error("‚ùå –§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞ Keycloak –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                self.test_results["failed"] += 1
                return False
        except TimeoutException:
            logger.error("‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞")
            self.test_results["failed"] += 1
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞: {e}")
            self.test_results["failed"] += 1
            self.test_results["errors"].append(f"Login form error: {e}")
            return False
    
    def test_login_with_test_user(self):
        """–¢–µ—Å—Ç –≤—Ö–æ–¥–∞ —Å —Ç–µ—Å—Ç–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–∞ —Å —Ç–µ—Å—Ç–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º...")
        self.test_results["total_tests"] += 1
        
        try:
            # –í–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            username_field = self.driver.find_element(By.ID, "username")
            password_field = self.driver.find_element(By.ID, "password")
            login_button = self.driver.find_element(By.ID, "kc-login")
            
            username_field.clear()
            username_field.send_keys("testuser")
            
            password_field.clear()
            password_field.send_keys("testpassword")
            
            # –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞
            login_button.click()
            time.sleep(5)
            
            current_url = self.driver.current_url
            logger.info(f"URL –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞: {current_url}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            if "localhost:9300" in current_url and "keycloak" not in current_url.lower():
                logger.info("‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                self.test_results["passed"] += 1
                return True
            else:
                logger.error(f"‚ùå –í—Ö–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è. URL: {current_url}")
                self.test_results["failed"] += 1
                return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {e}")
            self.test_results["failed"] += 1
            self.test_results["errors"].append(f"Login error: {e}")
            return False
    
    def test_authenticated_navigation(self):
        """–¢–µ—Å—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
        self.test_results["total_tests"] += 1
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
            pages_to_test = [
                "/dashboard",
                "/chat",
                "/consultation",
                "/archive",
                "/calculations"
            ]
            
            accessible_pages = 0
            for page in pages_to_test:
                try:
                    self.driver.get(f"{self.base_url}{page}")
                    time.sleep(2)
                    
                    current_url = self.driver.current_url
                    if page in current_url and "keycloak" not in current_url.lower():
                        accessible_pages += 1
                        logger.info(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –¥–æ—Å—Ç—É–ø–Ω–∞")
                    else:
                        logger.warning(f"‚ö†Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ {page}: {e}")
            
            if accessible_pages >= len(pages_to_test) * 0.8:  # 80% —Å—Ç—Ä–∞–Ω–∏—Ü –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã
                logger.info(f"‚úÖ –ù–∞–≤–∏–≥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç ({accessible_pages}/{len(pages_to_test)} —Å—Ç—Ä–∞–Ω–∏—Ü)")
                self.test_results["passed"] += 1
                return True
            else:
                logger.error(f"‚ùå –ù–∞–≤–∏–≥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–ª–æ—Ö–æ ({accessible_pages}/{len(pages_to_test)} —Å—Ç—Ä–∞–Ω–∏—Ü)")
                self.test_results["failed"] += 1
                return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {e}")
            self.test_results["failed"] += 1
            self.test_results["errors"].append(f"Navigation test error: {e}")
            return False
    
    def test_logout_functionality(self):
        """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –≤—ã—Ö–æ–¥–∞"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –≤—ã—Ö–æ–¥–∞...")
        self.test_results["total_tests"] += 1
        
        try:
            # –ò—â–µ–º –∫–Ω–æ–ø–∫—É –≤—ã—Ö–æ–¥–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö)
            logout_selectors = [
                "button[data-testid='logout']",
                "button:contains('–í—ã—Ö–æ–¥')",
                "button:contains('Logout')",
                "[data-testid='user-menu'] button:last-child",
                ".logout-button"
            ]
            
            logout_clicked = False
            for selector in logout_selectors:
                try:
                    if ":contains" in selector:
                        # –î–ª—è —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ —Å :contains –∏—Å–ø–æ–ª—å–∑—É–µ–º XPath
                        xpath = f"//button[contains(text(), '–í—ã—Ö–æ–¥') or contains(text(), 'Logout')]"
                        logout_button = self.driver.find_element(By.XPATH, xpath)
                    else:
                        logout_button = self.driver.find_element(By.CSS_SELECTOR, selector)
                    
                    logout_button.click()
                    logout_clicked = True
                    break
                except NoSuchElementException:
                    continue
            
            if not logout_clicked:
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∫–Ω–æ–ø–∫—É –≤—ã—Ö–æ–¥–∞, –ø–æ–ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ URL
                self.driver.get(f"{self.keycloak_url}/realms/ai-engineering/protocol/openid-connect/logout")
                logout_clicked = True
            
            if logout_clicked:
                time.sleep(3)
                current_url = self.driver.current_url
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–µ–ª –≤—ã—Ö–æ–¥
                if "keycloak" in current_url.lower() or "login" in current_url.lower():
                    logger.info("‚úÖ –í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                    self.test_results["passed"] += 1
                    return True
                else:
                    logger.error(f"‚ùå –í—ã—Ö–æ–¥ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω. URL: {current_url}")
                    self.test_results["failed"] += 1
                    return False
            else:
                logger.error("‚ùå –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                self.test_results["failed"] += 1
                return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã—Ö–æ–¥–∞: {e}")
            self.test_results["failed"] += 1
            self.test_results["errors"].append(f"Logout test error: {e}")
            return False
    
    def test_protected_routes(self):
        """–¢–µ—Å—Ç –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤...")
        self.test_results["total_tests"] += 1
        
        try:
            # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
            self.driver.delete_all_cookies()
            self.driver.get(f"{self.base_url}/dashboard")
            time.sleep(3)
            
            current_url = self.driver.current_url
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            if "keycloak" in current_url.lower() or "login" in current_url.lower():
                logger.info("‚úÖ –ó–∞—â–∏—â–µ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                self.test_results["passed"] += 1
                return True
            else:
                logger.error(f"‚ùå –ó–∞—â–∏—â–µ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç. URL: {current_url}")
                self.test_results["failed"] += 1
                return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤: {e}")
            self.test_results["failed"] += 1
            self.test_results["errors"].append(f"Protected routes test error: {e}")
            return False
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞")
        
        if not self.setup_driver():
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å WebDriver")
            return False
        
        try:
            # –¢–µ—Å—Ç—ã –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
            self.test_keycloak_availability()
            self.test_frontend_availability()
            
            # –¢–µ—Å—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            self.test_initial_page_load()
            self.test_redirect_to_login()
            
            # –¢–µ—Å—Ç—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            self.test_keycloak_login_form()
            self.test_login_with_test_user()
            
            # –¢–µ—Å—Ç—ã –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            self.test_authenticated_navigation()
            self.test_logout_functionality()
            
            # –¢–µ—Å—Ç—ã –∑–∞—â–∏—Ç—ã
            self.test_protected_routes()
            
        finally:
            if self.driver:
                self.driver.quit()
        
        return self.generate_report()
    
    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        logger.info("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏...")
        
        total = self.test_results["total_tests"]
        passed = self.test_results["passed"]
        failed = self.test_results["failed"]
        success_rate = (passed / total * 100) if total > 0 else 0
        
        report = {
            "timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
            "summary": {
                "total_tests": total,
                "passed": passed,
                "failed": failed,
                "success_rate": f"{success_rate:.1f}%"
            },
            "errors": self.test_results["errors"]
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        with open("frontend_auth_test_report.json", "w", encoding="utf-8") as f:
            json.dump(report, f, ensure_ascii=False, indent=2)
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        logger.info("=" * 60)
        logger.info("üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò –§–†–û–ù–¢–ï–ù–î–ê")
        logger.info("=" * 60)
        logger.info(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total}")
        logger.info(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}")
        logger.info(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}")
        logger.info(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
        
        if self.test_results["errors"]:
            logger.info("\nüö® –û–®–ò–ë–ö–ò:")
            for error in self.test_results["errors"]:
                logger.info(f"  - {error}")
        
        logger.info(f"\nüìÑ –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: frontend_auth_test_report.json")
        logger.info("=" * 60)
        
        return success_rate >= 80  # –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º –µ—Å–ª–∏ 80%+ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = FrontendAuthTester()
    success = tester.run_all_tests()
    
    if success:
        logger.info("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        exit(0)
    else:
        logger.error("üí• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏!")
        exit(1)

if __name__ == "__main__":
    main()
