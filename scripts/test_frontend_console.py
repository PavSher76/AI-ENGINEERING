#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∫–æ–Ω—Å–æ–ª–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ JavaScript –æ—à–∏–±–æ–∫
"""

import time
import logging
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('frontend_console_test.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class FrontendConsoleTester:
    def __init__(self):
        self.base_url = "https://localhost:9300"
        self.driver = None
        
    def setup_driver(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Chrome WebDriver"""
        chrome_options = Options()
        chrome_options.add_argument("--ignore-ssl-errors=yes")
        chrome_options.add_argument("--ignore-certificate-errors")
        chrome_options.add_argument("--allow-running-insecure-content")
        chrome_options.add_argument("--disable-web-security")
        chrome_options.add_argument("--disable-features=VizDisplayCompositor")
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument("--disable-gpu")
        chrome_options.add_argument("--window-size=1920,1080")
        chrome_options.add_argument("--disable-blink-features=AutomationControlled")
        chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
        chrome_options.add_experimental_option('useAutomationExtension', False)
        
        # –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Å–æ–ª–∏
        chrome_options.add_argument("--enable-logging")
        chrome_options.add_argument("--log-level=0")
        
        try:
            self.driver = webdriver.Chrome(options=chrome_options)
            self.driver.implicitly_wait(10)
            logger.info("‚úÖ Chrome WebDriver —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebDriver: {e}")
            return False
    
    def test_console_errors(self):
        """–¢–µ—Å—Ç –æ—à–∏–±–æ–∫ –≤ –∫–æ–Ω—Å–æ–ª–∏"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –≤ –∫–æ–Ω—Å–æ–ª–∏...")
        
        try:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            self.driver.get(self.base_url)
            time.sleep(5)
            
            # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏ –∫–æ–Ω—Å–æ–ª–∏
            logs = self.driver.get_log('browser')
            
            logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(logs)} –∑–∞–ø–∏—Å–µ–π –≤ –∫–æ–Ω—Å–æ–ª–∏")
            
            errors = []
            warnings = []
            info = []
            
            for log in logs:
                if log['level'] == 'SEVERE':
                    errors.append(log)
                elif log['level'] == 'WARNING':
                    warnings.append(log)
                else:
                    info.append(log)
            
            # –í—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫–∏
            if errors:
                logger.error(f"üö® –ù–∞–π–¥–µ–Ω–æ {len(errors)} –æ—à–∏–±–æ–∫ –≤ –∫–æ–Ω—Å–æ–ª–∏:")
                for error in errors:
                    logger.error(f"   {error['timestamp']}: {error['message']}")
            else:
                logger.info("‚úÖ –û—à–∏–±–æ–∫ –≤ –∫–æ–Ω—Å–æ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
            # –í—ã–≤–æ–¥–∏–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            if warnings:
                logger.warning(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(warnings)} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –≤ –∫–æ–Ω—Å–æ–ª–∏:")
                for warning in warnings:
                    logger.warning(f"   {warning['timestamp']}: {warning['message']}")
            else:
                logger.info("‚úÖ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –≤ –∫–æ–Ω—Å–æ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
            # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            if info:
                logger.info(f"‚ÑπÔ∏è –ù–∞–π–¥–µ–Ω–æ {len(info)} –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–æ–Ω—Å–æ–ª–∏:")
                for msg in info:
                    logger.info(f"   {msg['timestamp']}: {msg['message']}")
            
            return len(errors) == 0
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Å–æ–ª–∏: {e}")
            return False
    
    def test_network_requests(self):
        """–¢–µ—Å—Ç —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...")
        
        try:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –∑–∞—â–∏—â–µ–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            self.driver.get(f"{self.base_url}/dashboard")
            time.sleep(5)
            
            # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            logs = self.driver.get_log('performance')
            
            logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(logs)} –∑–∞–ø–∏—Å–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
            
            network_requests = []
            for log in logs:
                message = log['message']
                if 'Network.requestWillBeSent' in message or 'Network.responseReceived' in message:
                    network_requests.append(log)
            
            logger.info(f"üåê –ù–∞–π–¥–µ–Ω–æ {len(network_requests)} —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
            
            # –ò—â–µ–º –∑–∞–ø—Ä–æ—Å—ã –∫ Keycloak
            keycloak_requests = []
            for log in network_requests:
                message = log['message']
                if 'keycloak' in message.lower() or 'auth' in message.lower():
                    keycloak_requests.append(log)
            
            if keycloak_requests:
                logger.info(f"üîê –ù–∞–π–¥–µ–Ω–æ {len(keycloak_requests)} –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Keycloak:")
                for req in keycloak_requests:
                    logger.info(f"   {req['timestamp']}: {req['message']}")
            else:
                logger.warning("‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å–æ–≤ –∫ Keycloak –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
            return len(keycloak_requests) > 0
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {e}")
            return False
    
    def test_javascript_variables(self):
        """–¢–µ—Å—Ç JavaScript –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ JavaScript –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö...")
        
        try:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            self.driver.get(self.base_url)
            time.sleep(5)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            env_vars = [
                'process.env.REACT_APP_KEYCLOAK_URL',
                'process.env.REACT_APP_KEYCLOAK_REALM',
                'process.env.REACT_APP_KEYCLOAK_CLIENT_ID',
                'process.env.REACT_APP_ENABLE_KEYCLOAK'
            ]
            
            results = {}
            for var in env_vars:
                try:
                    value = self.driver.execute_script(f"return {var};")
                    results[var] = value
                    logger.info(f"‚úÖ {var} = {value}")
                except Exception as e:
                    results[var] = None
                    logger.warning(f"‚ö†Ô∏è {var} –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Keycloak –æ–±—ä–µ–∫—Ç–æ–≤
            keycloak_objects = [
                'window.keycloak',
                'window.ReactKeycloakProvider',
                'window.AuthContext'
            ]
            
            for obj in keycloak_objects:
                try:
                    value = self.driver.execute_script(f"return typeof {obj};")
                    if value != 'undefined':
                        logger.info(f"‚úÖ {obj} –æ–ø—Ä–µ–¥–µ–ª–µ–Ω: {value}")
                    else:
                        logger.warning(f"‚ö†Ô∏è {obj} –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è {obj} –æ—à–∏–±–∫–∞: {e}")
            
            return results
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è JavaScript –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: {e}")
            return {}
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Å–æ–ª–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞")
        
        if not self.setup_driver():
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å WebDriver")
            return False
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Å–æ–ª—å
            console_ok = self.test_console_errors()
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ—Ç–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            network_ok = self.test_network_requests()
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º JavaScript –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            js_vars = self.test_javascript_variables()
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            self.generate_report(console_ok, network_ok, js_vars)
            
        finally:
            if self.driver:
                self.driver.quit()
    
    def generate_report(self, console_ok, network_ok, js_vars):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞"""
        logger.info("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–Ω—Å–æ–ª–∏...")
        
        logger.info("=" * 60)
        logger.info("üìã –û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò –ö–û–ù–°–û–õ–ò –§–†–û–ù–¢–ï–ù–î–ê")
        logger.info("=" * 60)
        logger.info(f"üîç –û—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏: {'‚úÖ –ù–ï–¢' if console_ok else '‚ùå –ï–°–¢–¨'}")
        logger.info(f"üåê –°–µ—Ç–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ Keycloak: {'‚úÖ –ï–°–¢–¨' if network_ok else '‚ùå –ù–ï–¢'}")
        
        if js_vars:
            logger.info("‚öôÔ∏è JavaScript –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:")
            for var, value in js_vars.items():
                status = "‚úÖ" if value is not None else "‚ùå"
                logger.info(f"   {status} {var} = {value}")
        
        logger.info("=" * 60)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = FrontendConsoleTester()
    tester.run_all_tests()

if __name__ == "__main__":
    main()
