#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ frontend
"""

import requests
import json
import sys
import time
from typing import Dict, Any

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
FRONTEND_URL = "http://localhost:3000"
KEYCLOAK_URL = "http://localhost:8080"
REALM = "ai-engineering"
CLIENT_ID = "ai-frontend"

def test_frontend_accessibility():
    """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ frontend"""
    print("üñ•Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ frontend...")
    
    try:
        response = requests.get(FRONTEND_URL, timeout=10)
        if response.status_code == 200:
            print("‚úÖ Frontend –¥–æ—Å—Ç—É–ø–µ–Ω")
            return True
        else:
            print(f"‚ùå Frontend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –°—Ç–∞—Ç—É—Å: {response.status_code}")
            return False
    except requests.exceptions.Timeout:
        print("‚è∞ Frontend –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç (—Ç–∞–π–º–∞—É—Ç)")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ frontend: {e}")
        return False

def test_keycloak_accessibility():
    """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Keycloak"""
    print("üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Keycloak...")
    
    try:
        response = requests.get(f"{KEYCLOAK_URL}/realms/{REALM}")
        if response.status_code == 200:
            print("‚úÖ Keycloak –¥–æ—Å—Ç—É–ø–µ–Ω")
            return True
        else:
            print(f"‚ùå Keycloak –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –°—Ç–∞—Ç—É—Å: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Keycloak: {e}")
        return False

def test_keycloak_admin_console():
    """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ admin console Keycloak"""
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ admin console Keycloak...")
    
    try:
        response = requests.get(f"{KEYCLOAK_URL}/admin")
        if response.status_code == 200:
            print("‚úÖ Admin console Keycloak –¥–æ—Å—Ç—É–ø–µ–Ω")
            return True
        else:
            print(f"‚ùå Admin console –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –°—Ç–∞—Ç—É—Å: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ admin console: {e}")
        return False

def test_keycloak_realm_config():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ realm"""
    print("üè∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ realm...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º OpenID Connect –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        response = requests.get(f"{KEYCLOAK_URL}/realms/{REALM}/.well-known/openid_configuration")
        if response.status_code == 200:
            config = response.json()
            print("‚úÖ OpenID Connect –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞")
            print(f"   Issuer: {config.get('issuer', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
            print(f"   Authorization endpoint: {config.get('authorization_endpoint', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
            print(f"   Token endpoint: {config.get('token_endpoint', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
            return True
        else:
            print(f"‚ùå OpenID Connect –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –°—Ç–∞—Ç—É—Å: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ realm: {e}")
        return False

def test_keycloak_client_config():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞"""
    print("üîë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ OpenID Connect
        response = requests.get(f"{KEYCLOAK_URL}/realms/{REALM}/protocol/openid-connect/auth", 
                              params={
                                  'client_id': CLIENT_ID,
                                  'response_type': 'code',
                                  'scope': 'openid',
                                  'redirect_uri': f"{FRONTEND_URL}/login"
                              })
        
        if response.status_code == 200:
            print("‚úÖ –ö–ª–∏–µ–Ω—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
        elif response.status_code == 400:
            # –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –µ—Å–ª–∏ realm –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
            print("‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–æ–∂–∏–¥–∞–µ–º–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞. –°—Ç–∞—Ç—É—Å: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        return False

def test_frontend_build():
    """–¢–µ—Å—Ç —Å–±–æ—Ä–∫–∏ frontend"""
    print("üî® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∫–∏ frontend...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ frontend –æ—Ç–≤–µ—á–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTML
        response = requests.get(FRONTEND_URL, timeout=10)
        if response.status_code == 200:
            content = response.text
            if '<html' in content.lower() and 'react' in content.lower():
                print("‚úÖ Frontend —Å–æ–±—Ä–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                return True
            else:
                print("‚ùå Frontend –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π HTML")
                return False
        else:
            print(f"‚ùå Frontend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –°—Ç–∞—Ç—É—Å: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–±–æ—Ä–∫–∏ frontend: {e}")
        return False

def test_cors_configuration():
    """–¢–µ—Å—Ç CORS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CORS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
        response = requests.options(FRONTEND_URL, 
                                  headers={
                                      'Origin': 'http://localhost:3000',
                                      'Access-Control-Request-Method': 'GET'
                                  })
        
        cors_headers = {
            'Access-Control-Allow-Origin': response.headers.get('Access-Control-Allow-Origin'),
            'Access-Control-Allow-Methods': response.headers.get('Access-Control-Allow-Methods'),
            'Access-Control-Allow-Headers': response.headers.get('Access-Control-Allow-Headers'),
        }
        
        print("‚úÖ CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã")
        for header, value in cors_headers.items():
            if value:
                print(f"   {header}: {value}")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è CORS: {e}")
        return False

def test_environment_variables():
    """–¢–µ—Å—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("‚öôÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ frontend –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        response = requests.get(FRONTEND_URL, timeout=10)
        if response.status_code == 200:
            content = response.text
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ HTML
            env_checks = [
                ('REACT_APP_KEYCLOAK_URL', 'localhost:8080'),
                ('REACT_APP_KEYCLOAK_REALM', 'ai-engineering'),
                ('REACT_APP_KEYCLOAK_CLIENT_ID', 'ai-frontend'),
            ]
            
            all_found = True
            for env_var, expected_value in env_checks:
                if expected_value in content:
                    print(f"‚úÖ {env_var} –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                else:
                    print(f"‚ö†Ô∏è {env_var} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                    all_found = False
            
            return all_found
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è. –°—Ç–∞—Ç—É—Å: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è: {e}")
        return False

def test_authentication_flow():
    """–¢–µ—Å—Ç –ø–æ—Ç–æ–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    print("üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        auth_endpoints = [
            f"{KEYCLOAK_URL}/realms/{REALM}/protocol/openid-connect/auth",
            f"{KEYCLOAK_URL}/realms/{REALM}/protocol/openid-connect/token",
            f"{KEYCLOAK_URL}/realms/{REALM}/protocol/openid-connect/userinfo",
        ]
        
        all_accessible = True
        for endpoint in auth_endpoints:
            try:
                response = requests.get(endpoint, timeout=5)
                if response.status_code in [200, 400, 405]:  # 400/405 –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω—ã–º–∏
                    print(f"‚úÖ {endpoint.split('/')[-1]} –¥–æ—Å—Ç—É–ø–µ–Ω")
                else:
                    print(f"‚ùå {endpoint.split('/')[-1]} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –°—Ç–∞—Ç—É—Å: {response.status_code}")
                    all_accessible = False
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ {endpoint.split('/')[-1]}: {e}")
                all_accessible = False
        
        return all_accessible
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Ç–æ–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ frontend")
    print("=" * 60)
    
    tests = [
        ("–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å frontend", test_frontend_accessibility),
        ("–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Keycloak", test_keycloak_accessibility),
        ("Admin console Keycloak", test_keycloak_admin_console),
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è realm", test_keycloak_realm_config),
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞", test_keycloak_client_config),
        ("–°–±–æ—Ä–∫–∞ frontend", test_frontend_build),
        ("CORS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", test_cors_configuration),
        ("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è", test_environment_variables),
        ("–ü–æ—Ç–æ–∫ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏", test_authentication_flow),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\nüìã {test_name}:")
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results.append((test_name, False))
    
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("=" * 60)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{status} - {test_name}")
        if result:
            passed += 1
    
    print(f"\nüìà –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ ({passed/total*100:.1f}%)")
    
    if passed == total:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ frontend –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        print("‚úÖ Keycloak –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω")
        print("‚úÖ Frontend –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π")
    elif passed >= total * 0.7:
        print("\n‚ö†Ô∏è –ë–û–õ–¨–®–ò–ù–°–¢–í–û –¢–ï–°–¢–û–í –ü–†–û–ô–î–ï–ù–û")
        print("‚úÖ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("‚ö†Ô∏è –ï—Å—Ç—å –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")
    else:
        print("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´")
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫")
        sys.exit(1)
    
    print("\nüîß –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –û—Ç–∫—Ä–æ–π—Ç–µ frontend –≤ –±—Ä–∞—É–∑–µ—Ä–µ: http://localhost:3000")
    print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—Ö–æ–¥–∞")
    print("3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Keycloak —á–µ—Ä–µ–∑ admin console: http://localhost:8080/admin")
    print("4. –°–æ–∑–¥–∞–π—Ç–µ realm 'ai-engineering' –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    print("5. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
    
    print("\nüìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:")
    print("- docs/KEYCLOAK_AUTH_GUIDE.md - –ø–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ")
    print("- scripts/setup_keycloak_manual.md - –ø–æ—à–∞–≥–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")

if __name__ == "__main__":
    main()
