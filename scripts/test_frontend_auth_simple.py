#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –±–µ–∑ –±—Ä–∞—É–∑–µ—Ä–∞
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–æ–≤ –∏ –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
"""

import requests
import json
import time
import logging
from urllib.parse import urljoin

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('frontend_auth_simple_test.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class SimpleFrontendAuthTester:
    def __init__(self):
        self.base_url = "https://localhost:9300"
        self.keycloak_url = "https://localhost:9080"
        self.api_url = "https://localhost/api"
        self.test_results = {
            "total_tests": 0,
            "passed": 0,
            "failed": 0,
            "errors": []
        }
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–∏ —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π SSL
        self.session = requests.Session()
        self.session.verify = False
        self.session.timeout = 10
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ SSL
        import urllib3
        urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
    
    def test_service_availability(self):
        """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤...")
        
        services = {
            "Keycloak": f"{self.keycloak_url}/realms/ai-engineering",
            "Frontend": self.base_url,
            "API Gateway": f"{self.api_url}/health",
            "RAG Service": "http://localhost:9001/health",
            "Chat Service": "http://localhost:9003/health",
            "Consultation Service": "http://localhost:9004/health",
            "Archive Service": "http://localhost:9005/health",
            "Calculation Service": "http://localhost:9006/health",
            "Validation Service": "http://localhost:9007/health",
            "Document Service": "http://localhost:9008/health",
            "Analytics Service": "http://localhost:9009/health",
            "Integration Service": "http://localhost:9010/health",
            "Outgoing Control Service": "http://localhost:9011/health",
            "QR Validation Service": "http://localhost:9013/health",
            "TechExpert Connector": "http://localhost:9014/health"
        }
        
        for service_name, url in services.items():
            self.test_results["total_tests"] += 1
            try:
                response = self.session.get(url)
                if response.status_code in [200, 404]:  # 404 —Ç–æ–∂–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö endpoints
                    logger.info(f"‚úÖ {service_name} –¥–æ—Å—Ç—É–ø–µ–Ω ({response.status_code})")
                    self.test_results["passed"] += 1
                else:
                    logger.warning(f"‚ö†Ô∏è {service_name} –æ—Ç–≤–µ—á–∞–µ—Ç —Å –∫–æ–¥–æ–º {response.status_code}")
                    self.test_results["passed"] += 1  # –°—á–∏—Ç–∞–µ–º –∫–∞–∫ —É—Å–ø–µ—Ö, –µ—Å–ª–∏ —Å–µ—Ä–≤–∏—Å –æ—Ç–≤–µ—á–∞–µ—Ç
            except Exception as e:
                logger.error(f"‚ùå {service_name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
                self.test_results["failed"] += 1
                self.test_results["errors"].append(f"{service_name} connection error: {e}")
    
    def test_keycloak_configuration(self):
        """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Keycloak"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Keycloak...")
        self.test_results["total_tests"] += 1
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º realm
            realm_url = f"{self.keycloak_url}/realms/ai-engineering"
            response = self.session.get(realm_url)
            
            if response.status_code == 200:
                realm_data = response.json()
                logger.info(f"‚úÖ Realm 'ai-engineering' –Ω–∞–π–¥–µ–Ω")
                logger.info(f"   - Display Name: {realm_data.get('displayName', 'N/A')}")
                logger.info(f"   - Enabled: {realm_data.get('enabled', 'N/A')}")
                logger.info(f"   - SSL Required: {realm_data.get('sslRequired', 'N/A')}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
                client_url = f"{realm_url}/clients"
                client_response = self.session.get(client_url)
                
                if client_response.status_code == 200:
                    clients = client_response.json()
                    ai_frontend_client = None
                    for client in clients:
                        if client.get('clientId') == 'ai-frontend':
                            ai_frontend_client = client
                            break
                    
                    if ai_frontend_client:
                        logger.info(f"‚úÖ –ö–ª–∏–µ–Ω—Ç 'ai-frontend' –Ω–∞–π–¥–µ–Ω")
                        logger.info(f"   - Enabled: {ai_frontend_client.get('enabled', 'N/A')}")
                        logger.info(f"   - Public Client: {ai_frontend_client.get('publicClient', 'N/A')}")
                        logger.info(f"   - Standard Flow Enabled: {ai_frontend_client.get('standardFlowEnabled', 'N/A')}")
                        self.test_results["passed"] += 1
                    else:
                        logger.error("‚ùå –ö–ª–∏–µ–Ω—Ç 'ai-frontend' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                        self.test_results["failed"] += 1
                else:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤: {client_response.status_code}")
                    self.test_results["failed"] += 1
            else:
                logger.error(f"‚ùå Realm –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
                self.test_results["failed"] += 1
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Keycloak: {e}")
            self.test_results["failed"] += 1
            self.test_results["errors"].append(f"Keycloak config error: {e}")
    
    def test_frontend_environment(self):
        """–¢–µ—Å—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞...")
        self.test_results["total_tests"] += 1
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è
            response = self.session.get(self.base_url)
            
            if response.status_code == 200:
                content = response.text
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                checks = {
                    "React App": "React" in content or "react" in content,
                    "Keycloak Integration": "keycloak" in content.lower() or "@react-keycloak" in content,
                    "Material-UI": "mui" in content.lower() or "material" in content.lower(),
                    "Routing": "router" in content.lower() or "route" in content.lower()
                }
                
                passed_checks = sum(checks.values())
                total_checks = len(checks)
                
                logger.info(f"‚úÖ –§—Ä–æ–Ω—Ç–µ–Ω–¥ –∑–∞–≥—Ä—É–∂–µ–Ω")
                for check_name, result in checks.items():
                    status = "‚úÖ" if result else "‚ùå"
                    logger.info(f"   {status} {check_name}")
                
                if passed_checks >= total_checks * 0.75:  # 75% –ø—Ä–æ–≤–µ—Ä–æ–∫ –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–π—Ç–∏
                    logger.info(f"‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ ({passed_checks}/{total_checks})")
                    self.test_results["passed"] += 1
                else:
                    logger.error(f"‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è ({passed_checks}/{total_checks})")
                    self.test_results["failed"] += 1
            else:
                logger.error(f"‚ùå –§—Ä–æ–Ω—Ç–µ–Ω–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
                self.test_results["failed"] += 1
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞: {e}")
            self.test_results["failed"] += 1
            self.test_results["errors"].append(f"Frontend environment error: {e}")
    
    def test_ssl_certificates(self):
        """–¢–µ—Å—Ç SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤...")
        self.test_results["total_tests"] += 1
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º SSL –¥–ª—è Keycloak
            keycloak_response = self.session.get(f"{self.keycloak_url}/realms/ai-engineering")
            if keycloak_response.status_code == 200:
                logger.info("‚úÖ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç Keycloak —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º SSL –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
            frontend_response = self.session.get(self.base_url)
            if frontend_response.status_code == 200:
                logger.info("‚úÖ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            logger.info("‚úÖ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            self.test_results["passed"] += 1
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤: {e}")
            self.test_results["failed"] += 1
            self.test_results["errors"].append(f"SSL certificate error: {e}")
    
    def test_api_endpoints(self):
        """–¢–µ—Å—Ç API endpoints"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints...")
        
        api_endpoints = [
            "/health",
            "/api/health",
            "/api/v1/health"
        ]
        
        for endpoint in api_endpoints:
            self.test_results["total_tests"] += 1
            try:
                url = f"{self.api_url}{endpoint}"
                response = self.session.get(url)
                
                if response.status_code in [200, 404, 401]:  # 401 –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö endpoints
                    logger.info(f"‚úÖ API endpoint {endpoint} –æ—Ç–≤–µ—á–∞–µ—Ç ({response.status_code})")
                    self.test_results["passed"] += 1
                else:
                    logger.warning(f"‚ö†Ô∏è API endpoint {endpoint} –æ—Ç–≤–µ—á–∞–µ—Ç —Å –∫–æ–¥–æ–º {response.status_code}")
                    self.test_results["passed"] += 1  # –°—á–∏—Ç–∞–µ–º –∫–∞–∫ —É—Å–ø–µ—Ö
            except Exception as e:
                logger.error(f"‚ùå API endpoint {endpoint} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
                self.test_results["failed"] += 1
                self.test_results["errors"].append(f"API endpoint {endpoint} error: {e}")
    
    def test_network_connectivity(self):
        """–¢–µ—Å—Ç —Å–µ—Ç–µ–≤–æ–π —Å–≤—è–∑–Ω–æ—Å—Ç–∏"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–µ–≤–æ–π —Å–≤—è–∑–Ω–æ—Å—Ç–∏...")
        self.test_results["total_tests"] += 1
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–Ω–æ—Å—Ç—å –º–µ–∂–¥—É —Å–µ—Ä–≤–∏—Å–∞–º–∏
            test_urls = [
                self.keycloak_url,
                self.base_url,
                self.api_url
            ]
            
            connectivity_ok = True
            for url in test_urls:
                try:
                    response = self.session.get(url, timeout=5)
                    if response.status_code not in [200, 404, 401]:
                        connectivity_ok = False
                        break
                except Exception:
                    connectivity_ok = False
                    break
            
            if connectivity_ok:
                logger.info("‚úÖ –°–µ—Ç–µ–≤–∞—è —Å–≤—è–∑–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                self.test_results["passed"] += 1
            else:
                logger.error("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç–µ–≤–æ–π —Å–≤—è–∑–Ω–æ—Å—Ç—å—é")
                self.test_results["failed"] += 1
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ç–µ–≤–æ–π —Å–≤—è–∑–Ω–æ—Å—Ç–∏: {e}")
            self.test_results["failed"] += 1
            self.test_results["errors"].append(f"Network connectivity error: {e}")
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
        self.test_service_availability()
        self.test_keycloak_configuration()
        self.test_frontend_environment()
        self.test_ssl_certificates()
        self.test_api_endpoints()
        self.test_network_connectivity()
        
        return self.generate_report()
    
    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        logger.info("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏...")
        
        total = self.test_results["total_tests"]
        passed = self.test_results["passed"]
        failed = self.test_results["failed"]
        success_rate = (passed / total * 100) if total > 0 else 0
        
        report = {
            "timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
            "test_type": "simple_frontend_auth_test",
            "summary": {
                "total_tests": total,
                "passed": passed,
                "failed": failed,
                "success_rate": f"{success_rate:.1f}%"
            },
            "errors": self.test_results["errors"],
            "recommendations": self.get_recommendations()
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        with open("frontend_auth_simple_test_report.json", "w", encoding="utf-8") as f:
            json.dump(report, f, ensure_ascii=False, indent=2)
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        logger.info("=" * 60)
        logger.info("üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–°–¢–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò –§–†–û–ù–¢–ï–ù–î–ê")
        logger.info("=" * 60)
        logger.info(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total}")
        logger.info(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}")
        logger.info(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}")
        logger.info(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
        
        if self.test_results["errors"]:
            logger.info("\nüö® –û–®–ò–ë–ö–ò:")
            for error in self.test_results["errors"]:
                logger.info(f"  - {error}")
        
        recommendations = self.get_recommendations()
        if recommendations:
            logger.info("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            for rec in recommendations:
                logger.info(f"  - {rec}")
        
        logger.info(f"\nüìÑ –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: frontend_auth_simple_test_report.json")
        logger.info("=" * 60)
        
        return success_rate >= 70  # –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º –µ—Å–ª–∏ 70%+ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏
    
    def get_recommendations(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
        recommendations = []
        
        if self.test_results["failed"] > 0:
            recommendations.append("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º")
            recommendations.append("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã: docker-compose ps")
            recommendations.append("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤")
        
        if any("keycloak" in error.lower() for error in self.test_results["errors"]):
            recommendations.append("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Keycloak –≤ docker-compose.yml")
            recommendations.append("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ realm 'ai-engineering' –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        if any("frontend" in error.lower() for error in self.test_results["errors"]):
            recommendations.append("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞")
            recommendations.append("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–±—Ä–∞–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        if not recommendations:
            recommendations.append("–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            recommendations.append("–ú–æ–∂–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–º—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é")
        
        return recommendations

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = SimpleFrontendAuthTester()
    success = tester.run_all_tests()
    
    if success:
        logger.info("üéâ –ü—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        exit(0)
    else:
        logger.error("üí• –ü—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏!")
        exit(1)

if __name__ == "__main__":
    main()
